
#+OPTIONS: toc:2
#+OPTIONS: ^:nil
#+SETUPFILE: setup.org
* java 基础碎片
** base
   overload  重载  类
   overriding  super hidden 重写 继承
** collection
*** ArrayList
    http://wangkuiwu.github.io/2012/02/03/collection-03-arraylist/

    ArrayList 是一个数组队列，相当于 动态数组 能动态增长

    ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能

    和Vector不同，ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList
*** LinkedList
    http://wangkuiwu.github.io/2012/02/05/collection-05-linkedlist/
    双向链表
    (01) LinkedList继承于AbstractSequentialList，并且实现了Dequeue接口。
    (02) LinkedList包含两个重要的成员：header 和 size。

*** HashMap
** concurrent
   http://wangkuiwu.github.io/2012/08/01/threads-index/
*** 基础概念
   - 线程五种状态
     1. new
        新建状态
        Thread thread = new Thread()
     2. runnable
        就绪状态
        thread.start() 随时可能被CPU调度执行
     3. running
        运行状态
        线程获取CPU权限进行执行,线程只能从runnable --> running
     4. blocked 
        阻塞状态
        是线程放弃CPU使用权

        + 阻塞分三种情况:
          - 等待阻塞
            调用wait()等待某工作完成
          - 同步阻塞
            synchroized 同步锁被其他线程占用
          - 其他阻塞
            sleep() or join() or 发I/O请求
     5. dead
        死亡状态
        线程执行结束 or 异常退出run()方法
        
   wait()  休眠

   notify() 唤醒

   notifyAll()
*** 常用的实现多线程的两种方式
    Thread 和 Runnable 的相同点：都是“多线程的实现方式”。
    Thread 和 Runnable 的不同点：
    Thread 是类，而Runnable是接口；Thread本身是实现了Runnable接口的类。我们知道“一个类只能有一个父类，但是却能实现多个接口”，因此Runnable具有更好的扩展性。
    此外，Runnable还可以用于“资源的共享”。即，多个线程都是基于某一个Runnable对象建立的，它们会共享Runnable对象上的资源。
    通常，建议通过“Runnable”实现多线程！
*** 等待唤醒让步
    watit() 运行状态->阻塞状态
    sleep()
    notify()
    yield() 运行状态->就绪状态  不释放锁
    join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行
*** 生产消费模式
    http://wangkuiwu.github.io/2012/08/11/threads-basic/
*** 原子类
    基本类型: AtomicInteger, AtomicLong, AtomicBoolean ;
    数组类型: AtomicIntegerArray, AtomicLongArray, AtomicReferenceArray ;
    引用类型: AtomicReference, AtomicStampedRerence, AtomicMarkableReference ;
    对象的属性修改类型: AtomicIntegerFieldUpdater, AtomicLongFieldUpdater, AtomicReferenceFieldUpdater 。
    这些类存在的目的是对相应的数据进行原子操作。所谓原子操作，是指操作过程不会被中断，保证数据操作是以原子方式进行的
*** 锁
    根据锁的添加到Java中的时间，Java中的锁，可以分为"同步锁"和"JUC包中的锁"
    1. 同步锁 
        获取到同步锁的线程就能进行CPU调度，从而在CPU上执行；而没有获取到同步锁的线程，必须进行等待，
    2. JUC包中的锁
       - Lock
       - ReadWriteLock
         
*** 线程池
    Executor --> ExecutorService --> AbstractExecutorService --> ThreadPoolExecutor

    Executors是个静态工厂类。它通过静态工厂方法返回ExecutorService、ScheduledExecutorService、ThreadFactory 和 Callable 等类的对象

** Q&A
*** 什么是序列化
*** 装饰器
    java pyhon
*** 爬楼梯算法
*** arraylist linkedlist currentArraylist
*** shell 
14.某个目录下有两个文件a.txt和b.txt,文件格式为（ip，username）,

列如：

a.txt
127.0.0.1 zhangsan
127.0.0.1 wangxiaoer
127.0.0.2 lisi
127.0.0.3 wangwu

b.txt
127.0.0.4 lixiaolu
127.0.0.1 lisi

每个文件至少100万行，请使用Linux命令完成如下工作：

1）每个文件各自的ip数
2）出现在b.txt而没有出现在a.txt的ip
3）每个user出现的次数以及每个user对应的ip数
**** ps aux 
**** grep awk
     grep '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' 111.txt  IP

**** netstat  
 a 所有 n 不逆向确认 t/u tcp udp 
 p 端口 -c 持续监听

**** tcpdump
 root下
 -i eth0
 -D 显示有多少网卡
 -w 文件内
 -vv 显式详细的信息
 -n 不进行域名反解析 都是IP地址
 -c 10 十个包
 tcpdump -A 以assic码显式，数据包内容是二进制的，所以现在的会有乱码现象
 tcpdump -X 以两种 16进制和 assic形式

 ---
 局域网 dns 等 多是使用udp协议  

 协议 tcpdump tcp/icmp/udp 
      tcpdump -i eth0 'ip proto \tcp or \udp'
 端口 tcpdump port 80  
      tcpdump portrange 1-1024
      tcpdump src port 80
      tcpdump host www.baidu.com/192.168.1.1
 数据包大小
      tcpdump less 100
      tcpdump greater 100
 服务器受到攻击,如何判断流量来自哪里?

---
  and / or 组合

  tcpdump tcp and src 192.168.67.1 and port 53867

  tcpdump tcp or udp

  tcpdump tcp and not port 80
 
**** nc  scp  rsync 
**** iptables
     linux 内核 通过netfilter模块 实现网络访问控制功能
     iptables --> netfilter模块
     对流量 允许 丢弃 修改等操作

     src dst 接口  tcp udp 端口号 连接状态(new,ESTABLISHED)

     chain  过滤点: input forward output prerouting postrouting
     table :  filter nat mangle

     filter(chain) 对数据进行过滤
     nat 用以对数据包的源、目标地址进行修改
     mangle 用以对数据包的高级修改
**** namp

*** linux env bash 执行顺序
*** socket
*** spark/hadoop
**** yarn 管理
     http://blog.csdn.net/suifeng3051/article/details/49486927
*** JVM内存不要超过32G
*** 系统诊断
    https://www.ibm.com/developerworks/cn/java/j-lo-performance-tuning-practice/index.html
    oS 的诊断主要关注的是 CPU、Memory、I/O 三个方面。
    - cpu 诊断
      top  1，5，15分钟  不超过0.7*core
    - Memory

      free -m

      通过 top 命令可以查看进程使用的虚拟内存 VIRT 和物理内存 RES
      根据公式 VIRT = SWAP + RES 
      可以推算出具体应用使用的交换分区（Swap）情况，使用交换分区过大会影响 Java 应用性能，
      可以将 swappiness 值调到尽可能小。
      因为对于 Java 应用来说，占用太多交换分区可能会影响性能，毕竟磁盘性能比内存慢太多
    - io
      
*** https 和 http区别
    
    https 443 tls加密 加密传输身份认证的网络协议

    http  80  明文  无状态连接
*** nginx autoindex 403

    cat /var/log/nginx/error.log
    #+BEGIN_SRC 

    2018/03/10 17:56:19 [error] 23420#0: *1 "/home/manue1/wiki/index.html" is forbidden (13: Permission denied), client: 103.1.153.220, server: www.manue1.site, request: "GET / HTTP/1.1", host: "118.24.19.57"
    #+END_SRC

    目录权限问题 ps axu | grep nginx 发现启动进程用户为nginx
    #+BEGIN_SRC 
[manue1@manpc ~]$ ps aux | grep nginx
root     24694  0.0  0.1  58808  1188 ?        Ss   18:17   0:00 nginx: master process /usr/sbin/nginx
nginx    24695  0.0  0.2  61348  2108 ?        S    18:17   0:00 nginx: worker process
nginx    24696  0.0  0.2  61348  2108 ?        S    18:17   0:00 nginx: worker process
nginx    24697  0.0  0.2  61348  2108 ?        S    18:17   0:00 nginx: worker process
nginx    24698  0.0  0.2  61348  2596 ?        S    18:17   0:00 nginx: worker process
    
    #+END_SRC

    查看wiki 目录权限
    sudo -u nginx stat wiki
    #+BEGIN_SRC 

[manue1@manpc ~]$ sudo -u nginx stat wiki
[sudo] password for manue1:
stat: 无法获取"wiki" 的文件状态(stat): 权限不够

manue1@manpc ~]$ ls -al wiki/
总用量 32
drwxrwxr-x 7 manue1 manue1 4096 3月  10 16:52 .
drwx------ 4 manue1 manue1 4096 3月  10 18:14 ..
drwxrwxr-x 8 manue1 manue1 4096 3月  10 16:52 .git
drwxrwxr-x 2 manue1 manue1 4096 3月  10 16:52 html
drwxrwxr-x 2 manue1 manue1 4096 3月  10 16:52 markdown
drwxrwxr-x 2 manue1 manue1 4096 3月  10 16:52 org-mode
-rw-rwxr-- 1 manue1 manue1   15 3月  10 16:52 README.md
drwxrwxr-x 2 manue1 manue1 4096 3月  10 16:52 tools
    
    #+END_SRC

    问题在于root 运行的nginx 启动的woker进程是nginx用户下执行的,wiki是manue1用户下的站点,直接修改nginx.conf
    #+BEGIN_SRC 
user manue1;
worker_processes 4;
    #+END_SRC

    fixed!
*** nginx 多端口绑定子域名
* java Q&A

** 基础知识：

*** 集合类：List和Set比较，各自的子类比较（ArrayList，Vector，LinkedList；HashSet，TreeSet）
**** arraylist with linkedlist compare 
     1. arraylist是实现了基于动态数据的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高(在内存里是连着放的)
     2. 因为地址连续，arraylist要移动数据，所以插入和删除操作效率比较低
     3. LinkedList基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续地址，对于新增和删除操作，Linedlist比较占优势
     4. 因为Linkedlist要移动指针，所以查询操作性能比较低
*** bak
2）HashMap的底层实现，之后会问ConcurrentHashMap的底层实现；

3）如何实现HashMap顺序存储：可以参考LinkedHashMap的底层实现；

4）HashTable和ConcurrentHashMap的区别；

5）String,StringBuffer和StringBuilder的区别；

6）Object的方法有哪些：比如有wait方法，为什么会有；

7）wait和sleep的区别，必须理解；

8）JVM的内存结构，JVM的算法；

9）强引用，软引用和弱引用的区别；

10）数组在内存中如何分配；

11）用过哪些设计模式，手写一个（除单例）；

12）springmvc的核心是什么，请求的流程是怎么处理的，控制反转怎么实现的；

13）spring里面的aop的原理是什么；

14）mybatis如何处理结果集：反射，建议看看源码；

15）java的多态表现在哪里；

16）接口有什么用；

17）说说http,https协议；

18）tcp/ip协议簇；

19）osi五层网络协议；

20）tcp，udp区别；

21）用过哪些加密算法：对称加密，非对称加密算法；

22）说说tcp三次握手，四次挥手；

23）cookie和session的区别，分布式环境怎么保存用户状态；

24）git，svn区别；

25）请写一段栈溢出、堆溢出的代码；

26）ThreadLocal可以用来共享数据吗；



** IO:

1）bio，nio，aio的区别；

2）nio框架：dubbo的实现原理；

3）京东内部的jsf是使用的什么协议通讯：可参见dubbo的协议；




** 算法：

1）java中常说的堆和栈，分别是什么数据结构；另外，为什么要分为堆和栈来存储数据。

2）TreeMap如何插入数据：二叉树的左旋，右旋，双旋；

3）一个排序之后的数组，插入数据，可以使用什么方法？答：二分法；问：时间复杂度是多少？

4）平衡二叉树的时间复杂度；

5）Hash算法和二叉树算法分别什么时候用；

6）图的广度优先算法和深度优先算法：详见jvm中垃圾回收实现；




** 多线程相关：

1）说说阻塞队列的实现：可以参考ArrayBlockingQueue的底层实现（锁和同步都行）；

2）进程通讯的方式：消息队列，共享内存，信号量，socket通讯等；

3）用过并发包的哪些类；

4）什么地方用了多线程；

5）Excutors可以产生哪些线程池；

6）为什么要用线程池；

7）volatile关键字的用法：使多线程中的变量可见；



** 数据库相关（mysql）：

1）msyql优化经验：

2）mysql的语句优化，使用什么工具；

3）mysql的索引分类：B+，hash；什么情况用什么索引；

4）mysql的存储引擎有哪些，区别是什么；

5）说说事务的特性和隔离级别；

6）悲观锁和乐观锁的区别，怎么实现；





** mq：

1）mq的原理是什么：有点大。。都可以说；

2）mq如何保证实时性；

3）mq的持久化是怎么做的；



** nosql相关（主要是redis）:

1）redis和memcache的区别；

2）用redis做过什么；

3）redis是如何持久化的：rdb和aof；

4）redis集群如何同步；

5）redis的数据添加过程是怎样的：哈希槽；

6）redis的淘汰策略有哪些；

7）redis有哪些数据结构；



** zookeeper:

1）zookeeper是什么；

2）zookeeper哪里用到；

3）zookeeper的选主过程；

4）zookeeper集群之间如何通讯；

5）你们的zookeeper的节点加密是用的什么方式；

6）分布式锁的实现过程；





** linux相关：

1）linux常用的命令有哪些；

2）如何获取java进程的pid；

3）如何获取某个进程的网络端口号；

4）如何实时打印日志；

5）如何统计某个字符串行数；





** 设计与思想：

1）重构过代码没有？说说经验；

2）一千万的用户实时排名如何实现；

3）五万人并发抢票怎么实现
>>>>>>> 573b673d5d1624162e3f528dddf944da93a9149f
