#+TITLE: Question & Answer
* Question & Answer
** TODO [2019-04-28 Sun] centos yum 离线安装
   #+BEGIN_QUOTE
   SCHEDULED: <2019-04-28 Sun 15:48>

  CentOS利用yum下载好rpm包，并离线安装

  yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo

  yum search docker-ce

  yum install --downloadonly --downloaddir=/tmp/docker_repo/ docker-ce
 
  1、联网安装好rpm包，并将下载好的包备好
  #yum install --downloadonly --downloaddir=/home/samba  samba
  其中samba 是要用yum安装的安装包，/home/samba是要存放下载的yum安装包及其依赖包的保存路径
   
  2、离线的机器上，在rpm所在的文件夹内，执行以下脚本
  #rpm -Uvh --force --nodeps *.rpm
 
   #+END_QUOTE
** TODO [2019-04-27 Sat] mac 下制作win10 usb启动盘
   #+BEGIN_QUOTE
   SCHEDULED: <2019-04-27 Sat 02:26>
 
   https://www.joshbeam.com/2017/11/23/making-a-bootable-windows-10-usb-drive-on-macos-high-sierra/

   diskutil eraseDisk MS-DOS "WINDOWS10" MBR disk#

   cp -rp /Volumes/CCCOMA_X64FRE_EN-US_DV9/* /Volumes/WINDOWS10/

   #+END_QUOTE
** TODO [2019-04-06 Sat] systemd 配置自启动服务
   #+BEGIN_QUOTE
   SCHEDULED: <2019-04-06 Sat 15:59>

   #+BEGIN_SRC 
[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
PermissionsStartOnly=true
ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks.json
Restart=on-abort
[Install]
WantedBy=multi-user.target
   #+END_SRC
 
   #+END_QUOTE
** TODO [2019-03-27 Wed] google/protobuf 
   #+BEGIN_QUOTE
   SCHEDULED: <2019-03-27 Wed 22:48>
 
   #+END_QUOTE
** TODO [2019-03-22 Fri] 系统梳理shell知识点
   #+BEGIN_QUOTE
   SCHEDULED: <2019-03-22 Fri 22:24>
 
   #+END_QUOTE
** TODO [2019-03-22 Fri] 寻找一款mac下好用的流程图工具
   #+BEGIN_QUOTE
   SCHEDULED: <2019-03-22 Fri 21:49>
 
   #+END_QUOTE
** TODO [2019-03-08 Fri] 如何将markdown转为org-mode
   #+BEGIN_QUOTE
   SCHEDULED: <2019-03-08 Fri 18:24>

   : pandoc -f markdown -t org -o newfile.org original-file.markdown

   =pandoc= 支持多种转换形式
 
   #+END_QUOTE
** TODO [2019-02-26 Tue] 通过douban sub id 获取imdb 评分
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-26 Tue 17:32>
   
   海报图片、评分、 图片信息如何展示在电报
   #+END_QUOTE
** TODO [2019-02-26 Tue] topk问题
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-28 Thu 09:54>
 
   #+END_QUOTE
** TODO [2019-02-23 Sat] 截图自动上传到图床
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-23 Sat 20:46>
 
   #+END_QUOTE
** DONE [2019-02-19 Tue] org-mode 内直接运行go代码块
   CLOSED: [2019-02-19 Tue 17:52]
   - State "DONE"       from "TODO"       [2019-02-19 Tue 17:52]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-19 Tue 17:08>

   https://brantou.github.io/2017/06/12/go-source-code-block-in-org/

   https://github.com/pope/ob-go

   ob-go 使 Org-babel 可执行Go代码。 与解释语言可直接执行不同，Go需要先编译为可执行文件，然后运行。
   Go代码通过 go run 命令编译和运行。 若代码中没有 main 函数，默认情况下，代码会被包裹在简单的 main 函数中。
   若 :package 选项没设置并且代码中没有声明 package ， 则 main package 被声明。 
   示例如下，代码被执行，执行结果被回写到 buffer 中。

   找到的目录 org-plus-contrib

   新建 ob-go.el , 然后把 github中代码 复制到新建的文件中

   配置 org-babel-load-languages, 如下：

   #+BEGIN_SRC lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (C . t)
      (go . t)
      (emacs-lisp . t)
      (shell . t)))
   #+END_SRC

 
   #+END_QUOTE
** DONE [2019-02-18 Mon] config emacs for go
   CLOSED: [2019-02-19 Tue 17:52]
   - State "DONE"       from "TODO"       [2019-02-19 Tue 17:52]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-18 Mon 21:15>

   http://www.cnblogs.com/lienhua34/p/5838166.html

   http://www.cnblogs.com/lienhua34/p/5839510.html

   https://my.oschina.net/redhouse/blog/350337
   
 
   go get github.com/rogpeppe/godef

   go get -u github.com/dougm/goflymake

   1. gomode install
      
      https://github.com/dominikh/go-mode.el

      这里介绍了emacs下go编程的常用插件

   2. gocode
      * Install auto-complete-mode
        
        (require 'auto-complete)
        (ac-config-default)

      * Copy emacs/go-autocomplete.el file from the gocode source distribution to a directory which is in your 'load-path' in emacs.

      * Add these lines to your .emacs:

        (require 'go-autocomplete)
        (require 'auto-complete-config)
        (ac-config-default)

   3. flymake or flycheck

      https://github.com/dougm/goflymake

      下载go-flycheck.el 或 go-flymake.el 加载到emacs配置中

      切记两者只选其一

   #+END_QUOTE

** TODO [2019-02-16 Sat] 配置个人邮箱服务器
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-26 Tue 15:22>
 
   #+END_QUOTE
** DONE [2019-02-16 Sat] install memcache in mac
   CLOSED: [2019-02-19 Tue 17:58]
   - State "DONE"       from "TODO"       [2019-02-19 Tue 17:58]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-16 Sat 13:40>

   https://www.hacksparrow.com/install-memcached-on-mac-os-x.html

   : brew install memcached

   Starting memcached

   Memcached listens on port 11211 by default, to change it, use the -p option.

   $ memcached -p 8000

   To run memcached as a daemon (background process), instead of sitting at your terminal, use the -d option.

   $ memcached -d -p 8000

   : memcached -d 
 

   #+END_QUOTE
** DONE [2019-02-13 Wed] config emacs for python development
   CLOSED: [2019-02-19 Tue 17:58]
   - State "DONE"       from "TODO"       [2019-02-19 Tue 17:58]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-02-13 Wed 23:15>
 
   https://wdicc.com/emacs-as-python-ide/

   anaconda-mode 

   auto-virtualenv

   elpy

   flycheck

   python outline

   indent-tools

   yasnippet 和 company , jedi

   https://www.jianshu.com/p/dac96805cb10

   #+END_QUOTE
** DONE [2019-01-28 Mon] redis 配置
   CLOSED: [2019-01-28 Mon 14:50]
   - State "DONE"       from "TODO"       [2019-01-28 Mon 14:50]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-28 Mon 11:40>

   http://blog.fens.me/linux-redis-install/

*ubuntu*   

#安装Redis服务器端
  
1. ~ sudo apt-get install redis-server

安装完成后，Redis服务器会自动启动

2. 默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为redisredis。

用vi打开Redis服务器的配置文件redis.conf

~ sudo vi /etc/redis/redis.conf

#取消注释requirepass  =requirepass redisredis=

3. 让Redis服务器被远程访问

默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。

用vi打开Redis服务器的配置文件redis.conf

~ sudo vi /etc/redis/redis.conf

#注释bind  #bind 127.0.0.1

*mac*

1. brew install redis

2. sudo vim  /usr/local/etc/redis.conf
   
   =requirepas xxxpasswd=

3. redis-server /usr/local/etc/redis.conf >/dev/null &

   
 
   #+END_QUOTE
** DONE [2019-01-26 Sat] [[file:note/user-help.org][telegram install for android and iphone]]
   CLOSED: [2019-01-27 Sun 00:02]
   - State "DONE"       from "TODO"       [2019-01-27 Sun 00:02]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-26 Sat 21:21>

   #+END_QUOTE
** DONE [2019-01-24 Thu] 查找收集新闻订阅源
   CLOSED: [2019-01-28 Mon 01:45]
   - State "DONE"       from "TODO"       [2019-01-28 Mon 01:45] \\
     华尔街实时资讯
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-27 Sun 11:42>
 
   #+END_QUOTE

** DONE [2019-01-16 Wed] emacs快速创建python文件模板
   CLOSED: [2019-01-23 Wed 12:04]
   - State "DONE"       from "TODO"       [2019-01-23 Wed 12:04] \\
     利用yasnippet创建快捷输入，有时候会比较灵活,不需要一些定制模板
     
     yas-new-snippet 创建模板

     c-c c-c 保存
     
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-19 Sat 16:19>
 
   #+END_QUOTE
** DONE 添加org mode habit 配置
   CLOSED: [2019-01-13 Sun 01:52]
   - State "DONE"       from "TODO"       [2019-01-13 Sun 01:52]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-13 Sun 00:54>
   #+BEGIN_SRC elisp

           ("h" "Habit" entry (file "~/github/org-pages/habit.org")
            "* TODO %?\nSCHEDULED: <%<%Y-%m-%d %a .+1d>>\n:PROPETIES:\n:CREATED: %U\n:STYLE: habit\n:REPEAT_TO_STATE: TODO\n:LOGGING: DONE(!)\n:ARCHIVE: %%s_archive::* Habits\n:END:\n%U\n"
            :empty-lines 1
            :prepend t)

   #+END_SRC

   https://orgmode.org/manual/Tracking-your-habits.html#Tracking-your-habits

   TODO https://www.wanglianghome.org/2017/08/12/org-habit/
 
   #+END_QUOTE
** DONE emacs set mpv play video
   CLOSED: [2019-01-06 Sun 21:48]
   - State "DONE"       from "TODO"       [2019-01-06 Sun 21:48]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-06 Sun 14:17>

   配合调整透明度 查看视频记录笔记
   
   mpd 使用文档与快捷键可以查看文档
   
   https://mpv.io/manual/master/#description


   [ and ]

   Decrease/increase current playback speed by 10%.

   { and }
   
   Halve/double current playback speed.

   BACKSPACE

   Reset playback speed to normal.

   m
   
   Mute sound.

 
   #+END_QUOTE
** DONE emacs 代码折叠
   CLOSED: [2019-01-04 Fri 17:21]
   - State "DONE"       from "TODO"       [2019-01-04 Fri 17:21]
   #+BEGIN_QUOTE
   SCHEDULED: <2019-01-04 Fri 17:03>

   hs-show-all:显示所有的代码

   hs-hide-all:折叠所有的代码

   hs-show-block:显示当前代码区

   hs-hide-block:折叠当前代码区

   hs-toggle-hiding: 折叠/显示当前代码区 (spc hs)

   代码折叠，其实完全可以使用 M-x =helm-imenu= 替代

   helm-imenu (spc hi)


 
   #+END_QUOTE
** DONE bt sync 
   CLOSED: [2019-01-02 Wed 23:44]
   - State "DONE"       from "TODO"       [2019-01-02 Wed 23:44]
   #+BEGIN_QUOTE
   DEADLINE: <2019-01-08 Tue 10:03>
   
   https://program-think.blogspot.com/2017/08/GFW-Resilio-Sync.html 
   
   *节点发现*
   * Tracker Server（追踪服务器）

   * DHT 网络

   * Predefined Hosts

   *Resilio Sync 国内使用*

   proxifiter 代理能够访问一下两个节点：

   target host :

   173.244.217.42

   209.95.56.60

   #+END_QUOTE
** DONE create telegram group
   CLOSED: [2018-12-30 Sun 12:09]
   - State "DONE"       from "TODO"       [2018-12-30 Sun 12:09]
   #+BEGIN_QUOTE
   DEADLINE: <2018-12-30 Sun 10:00>

   telegram 代理支持

   1. socks5

      shadowrocket 127.0.0.1:1082
   2. MTproto
      官方提供很多 :

      自建mtproto: https://github.com/TelegramMessenger/MTProxy

   proxy sponsor how to set ?

   
   #+END_QUOTE
** TODO emacs mgit use
   #+BEGIN_QUOTE
   DEADLINE: <2019-01-25 Sun 19:02>
 
   #+END_QUOTE
** DONE how to talk with irc in emacs
   CLOSED: [2019-01-18 Fri 11:11]
   
   - State "DONE"       from "TODO"       [2019-01-18 Fri 11:11] \\

     #+BEGIN_QUOTE
     https://emacs-china.org/t/erc/2366

   - erc

    init-erc.el
    
    https://www.emacswiki.org/emacs/ErcSSL
    
   - gnutls
     
     http://macappstore.org/gnutls/
     #+END_QUOTE



 #+BEGIN_QUOTE
 DEADLINE: <2019-01-16 Sun 16:33>
 
  #+END_QUOTE
** DONE virtualenv set different python env for emacs 
   CLOSED: [2018-12-27 Thu 15:53]
   - State "DONE"       from "TODO"       [2018-12-27 Thu 15:53]
 #+BEGIN_QUOTE
 DEADLINE: <2018-12-27 Thu 15:41>

1. different env python install

 sudo pip install virtualenv

 mkdir ~/opt/virtualenvs 
 
 virtualenv --python=/usr/bin/python2.6 ~/opt/virtualenvs/emacs-python

 cd ~/opt/virtualenvs/emacs-python/bin

 source activate // deactivate

 alias emacs-python='source ~/opt/virtualenvs/emacs-python/bin/activate'

 python3
 
 virtualenv --python=/usr/local/bin/python3  ~/opt/virtualenvs/emacs-python3

 alias emacs-python3='source ~/opt/virtualenvs/emacs-python/bin/activate'
2. config emacs

   *手动修改python3* 

   : M-x pyvenv-activate RET <path-to-venv>

   *配置文件* 

   pyvenv-workon

   #+BEGIN_SRC lisp
   (setenv "WORKON_HOME" "~/opt/virtualenvs/")

   (when (require 'elpy nil t)
     (elpy-enable)
     (pyvenv-activate "~/opt/virtualenvs/emacs-python")
     (setq elpy-rpc-backend "jedi")
   )
   #+END_SRC
 

  #+END_QUOTE
** UNDO how to use youdao translation in emacs
   CLOSED: [2018-12-28 Fri 13:09] DEADLINE: <2018-12-28 Fri>
   - State "UNDO"       from "TODO"       [2018-12-28 Fri 13:09]
 #+BEGIN_QUOTE

 https://github.com/xuchunyang/youdao-dictionary.el
 
 #+END_QUOTE
** DONE how to use emacs to program python
   CLOSED: [2018-12-28 Fri 16:44] DEADLINE: <2018-12-28 Fri>
   - State "DONE"       from "TODO"       [2018-12-28 Fri 16:44]
   #+BEGIN_QUOTE

http://wikemacs.org/wiki/Python#A_Hydra_to_choose_what_tests_to_run.2C_navigate_errors_and_switch_to_the_console

https://wdicc.com/emacs-as-python-ide/
1. elpy

   pip install jedi flake8 autopep8
   
  *静态代码检测:*

  Flake8 是由Python官方发布的一款辅助检测Python代码是否规范的工具
    
  *格式化代码*

  YAPF (Yet Another Python Formatter)是Google开源的一个用来格式化Python代码的工具.
  
  支持2种代码规范 (PEP8 Google style)

  Black，号称不妥协的代码格式化工具，因为它检测到不符合规范的代码风格直接就帮你全部格式化好，

  根本不需要你确定，直接替你做好决定

  M-x elpy-config

  https://github.com/jorgenschaefer/elpy/wiki/Configuration

  pip install yapf 
   
  M-x elpy-format-code (, r f)

  #+BEGIN_SRC elisp 

(when (require 'elpy nil t)
  (elpy-enable)
  (pyvenv-activate "~/opt/virtualenvs/emacs-python")
)


(defun goto-def-or-rgrep ()
  "Go to definition of thing at point or do an rgrep in project if that fails"
  (interactive)
  (condition-case nil (elpy-goto-definition)
    (error (elpy-rgrep-symbol (thing-at-point 'symbol)))))

(define-key elpy-mode-map (kbd "M-.") 'goto-def-or-rgrep)

(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)                 ; optional
   #+END_SRC

  https://elpy.readthedocs.io/en/latest/introduction.html

2. How do use Emacs to look up a function in Python?
   
   =M-.= like pycharm
   
   =c-c c-d= elpy-doc 查看函数文档
   
 
  #+END_QUOTE

** TODO 2019年度计划
   SCHEDULED: <2019-03-12 Tue .+1d>
   
   1. 每月坚持读完一本技术书籍,每天都要读书
   2. 每周坚持锻炼一次,早睡早起,避免过劳死
   3. 每周听一个专辑,看两部电影,同步更新sync
   4. 每月抽出时间出去游玩一次
   5. 掌握一门新的语言go

** DONE how to hook pomodoro
   CLOSED: [2018-12-28 Fri 13:17]

   - State "DONE"       from "TODO"       [2018-12-28 Fri 13:17]
   #+BEGIN_QUOTE
   #+BEGIN_SRC elisp

   (require 'pomodoro)

   (eval-after-load 'pomodoro
     '(progn
        (setq pomodoro-break-time 2)
        (setq pomodoro-long-break-time 5)
        (setq pomodoro-work-time 25)
        (pomodoro-add-to-mode-line)
        (setq-default mode-line-frmat
                 (cons '(pomodoro-mode-line-string pomodoro-mode-line-string)
                       mode-line-format))))
   #+END_SRC

   M-x  customize-group config =/usr/bin/afplay game_win.wav path=

   在 =pomodoro.el= 中修改pomodoro-start和pomodoro-stop函数
   添加
   #+BEGIN_SRC 
    (play-pomodoro-work-sound)
    (play-pomodoro-break-sound)
   #+END_SRC

   临时修改了原函数,lisp如何hook?

   #+END_QUOTE
** DONE emacs org-pomodoro install
   CLOSED: [2018-12-26 Wed 16:20] DEADLINE: <2018-12-28 Fri>
   - State "DONE"       from "TODO"       [2018-12-26 Wed 16:20] \\
     org-pomodoro 过于臃肿，喜欢满足基本功能的pomodoro，我只需要定时+播放提示音乐功能
** DONE mac sock to http proxy
   CLOSED: [2018-12-26 Wed 16:43]
   - State "DONE"       from "TODO"       [2018-12-26 Wed 16:43]
   #+BEGIN_QUOTE
You can install it with brew:

=brew install polipo=
And open a config file:

vim ~/.poliporc
Fill it with the content:

#+BEGIN_SRC 
# your SOCKS local port
socksParentProxy = 127.0.0.1:1080
socksProxyType = socks5

# default port is 8123
proxyAddress = '::0'
proxyPort = 8888 
#+END_SRC

Start polipo with polipo -c ~/.poliporc and now polipo established a http proxy based on your socks5 proxy.

后来发现shadowsocks自动开启了，socks5和http代理 伪需求了
   #+END_QUOTE
** DONE learn more form emacs itself
   CLOSED: [2018-12-22 Sat 19:50]
   
   - State "DONE"       from "TODO"       [2018-12-22 Sat 19:50]
   #+BEGIN_QUOTE
   =c-h c-f= :: find-function

   =c-h c-v= :: find-variables

   =c-h c-k= :: find-function-no-key
   
   #+BEGIN_SRC lisp
   (global-set-key (kdb "C-h C-f") 'find-function)
   (global-set-key (kdb "C-h C-v") 'find-variable)
   (global-set-key (kdb "C-h C-k") 'find-function-on-key)
   #+END_SRC
   
   =M-x info= 学习emacs技巧
   
   #+END_QUOTE
** DONE emacs 截图
   CLOSED: [2019-01-07 Mon 00:33] SCHEDULED: <2018-12-31 Mon>
   - State "DONE"       from "TODO"       [2019-01-07 Mon 00:33]
   #+BEGIN_QUOTE

   http://blog.binchen.org/posts/how-to-take-screen-shot-for-business-people-efficiently-in-emacs.html

    参考陈斌的思路，mac上创建截图后，复制绝对路径到剪切板,然后调用elisp函数读取粘贴板写入org-mode文件内

    #+BEGIN_SRC elisp
    (defun my-gclip ()
      (local-require 'simpleclip)
      (cond
       (simpleclip-works
        (simpleclip-get-contents))
       ((eq system-type 'darwin)
        (with-output-to-string
          (with-current-buffer standard-output
            (call-process "/usr/bin/pbpaste" nil t nil "-Prefer" "txt"))))
       ((eq system-type 'cygwin)
        (with-output-to-string
          (with-current-buffer standard-output
            (call-process "getclip" nil t nil))))
       ((memq system-type '(gnu gnu/linux gnu/kfreebsd))
        (let* ((powershell-program (executable-find "powershell.exe")))
          (cond
           (powershell-program
            ;; PowerLine adds extra white space character at the end of text
            (s-trim-right
             (with-output-to-string
               (with-current-buffer standard-output
                 (call-process powershell-program nil t nil "-command" "Get-Clipboard")))))
           (t
            (with-output-to-string
              (with-current-buffer standard-output
                (call-process "xsel" nil t nil "--clipboard" "--output")))))))))


    (defun insert-file-link-from-clipboard ()
      "Make sure the full path of file exist in clipboard.
    This command will convert full path into relative path.
    Then insert it as a local file link in `org-mode'."
      (interactive)
      (insert "#+ATTR_HTML: :width 30% :height 30% \n")
      (insert (format "[[file:%s]]" (file-relative-name (my-gclip)))))

    #+END_SRC

    
    mac 截图复制绝对路径到剪切板
   
   https://apple.stackexchange.com/questions/115999/take-screenshot-and-copy-its-file-path-to-clipboard

   
   =f=~/Desktop/$(date +%Y%m%d%H%M%S).png && screencapture -i $f && printf %s $f  | pbcopy=


   *使用Automator创建workflow service*

   #+BEGIN_SRC 
   f=~/github/org-pages/images/screenshot/$(date +%Y%m%d%H%M%S).png
   screencapture -i $f
   osascript -e 'set the clipboard to POSIX file "'$f'"'
   #+END_SRC
      
   #+ATTR_HTML: :width 30% :height 30% 
   [[file:images/screenshot/20190107000944.png]]

   Then give the service a keyboard shortcut from System Preferences

   =ctrl + shift + command + p=

   #+ATTR_HTML: :width 30% :height 30% 
   [[file:images/screenshot/20190107003054.png]]
   
   #+END_QUOTE
** DONE emacs 使用 mpd /mpc 听音乐
   CLOSED: [2018-12-19 Wed 20:07]
   - State "DONE"       from "TODO"       [2018-12-19 Wed 20:07]
#+BEGIN_QUOTE

*install mpd* ::

 https://computingforgeeks.com/install-configure-mpd-ncmpcpp-macos/

 Start mpd service using the command:

 =$ mpd=

 Mpd process can be killed by running the command.

 =$ mpd --kill=

 To update mpd, execute the command,

 =$ mpd update=

*install mpc-client* ::

 brew install mpc
   
 =mpc search any  taylor | mpc add taylor-1989=

 =mpc help=

*mpc command keywords* :: 

    #+BEGIN_VERSE
    
    mpc的常用参数：
    mpc add 添加歌曲到播放列表
    mpc listall|mpc add 可以把所有歌曲都添加到当前的播放列表
    mpc listall 可以列出所有的歌曲
    mpc playlist 查看当前播放列表
    mpc 查看当前播放歌曲的信息
    mpc play 播放
    mpc pause 暂停
    mpc stop 停止
    mpc next 播放下一首
    mpc prev 播放前一首
    mpc repeat on 启用重复播放
    mpc random on 启用随机播放
    mpc play 18 播放列表中第18首
    mpc search filename 可以按文件名查找
    mpc search artist 可以按歌手查找
    mpc search title 可以按歌曲名查找
    音量调节：
    mpc volume +20
    mpc volume -20
    #+END_VERSE
    
    https://www.mankier.com/1/mpc#Commands-Sticker_Commands

*emms as mpc config* ::
    #+BEGIN_SRC 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; emms mpd config 
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq emms-player-list '(emms-player-mpd))
(setq emms-player-mpd-server-name "localhost")
(setq emms-player-mpd-server-port "6600")
(setq emms-info-functions '(emms-info-mpd))
(setq emms-volume-change-function 'emms-volume-mpd-change)


;;;emms快捷键设置
(global-set-key (kbd "C-c e b") 'emms-smart-browse)
(global-set-key (kbd "C-c e r") 'emms-player-mpd-update-all-reset-cache)
(global-set-key (kbd "C-c e l") 'emms-playlist-mode-go)
(global-set-key (kbd "C-c e n") 'emms-next)
(global-set-key (kbd "C-c e p") 'emms-previous)
(global-set-key (kbd "C-c e s") 'emms-pause)

(defun mpd/start-music-daemon ()
  "Start MPD, connects to it and syncs the metadata cache."
  (interactive)
  (shell-command "mpd")
  (mpd/update-database)
  (emms-player-mpd-connect)
  (emms-cache-set-from-mpd-all)
  (message "MPD Started!"))
(global-set-key (kbd "C-c m c") 'mpd/start-music-daemon)

(defun mpd/kill-music-daemon ()
  "Stops playback and kill the music daemon."
  (interactive)
  (emms-stop)
  (call-process "killall" nil nil nil "mpd")
  (message "MPD Killed!"))
(global-set-key (kbd "C-c m k") 'mpd/kill-music-daemon)

(defun mpd/update-database ()
  "Updates the MPD database synchronously."
  (interactive)
  (call-process "mpc" nil nil nil "update")
  (message "MPD Database Updated!"))
(global-set-key (kbd "C-c m u") 'mpd/update-database)
    
    #+END_SRC

    使用emms-smart-browse操作playlist 

    emms-add-directory-tree 添加内容到播放列表

    emms-smart-browse ? 使用效果不佳

    emms-player-mpd-connect 获取最新mpc命令行下更新的播放列表

    emms-playlist-clear 清除播放列表
     
    ---

    每次添加新专辑需要更新playlist
    
    shell下: mpc clear && mpc ls | mpc add 添加所有到播放列表
    
    emacs下： emms-playlist-clear && emms-player-mpd-connect

#+END_QUOTE
   
** DONE arch 系统剪切板调用
   CLOSED: [2018-12-19 Wed 20:07]
   - State "DONE"       from "TODO"       [2018-12-19 Wed 20:07]
#+BEGIN_QUOTE
=c-;= 方便调用
#+END_QUOTE
** DONE arch 安装teamviewer
   CLOSED: [2018-12-12 Wed 15:57]
   - State "DONE"       from "TODO"       [2018-12-12 Wed 15:57]
#+BEGIN_QUOTE
=sudo pacman -Sy teamviewer=

版本14 无法运行

版本12 安装[[https://linuxhint.com/install_teamviewer_arch_linux/][参考]] ,运行teamviewer需要启动下面deamon进程

#+BEGIN_SRC 
sudo systemctl status teamviewerd
sudo systemctl enable teamviewerd

#+END_SRC
#+END_QUOTE
** DONE emacs快速注释快捷键
   CLOSED: [2018-12-12 Wed 17:20]
   - State "DONE"       from "TODO"       [2018-12-12 Wed 17:20]
#+BEGIN_QUOTE
   vim 的多行选择I失效
   
   =M-;= 注释/反注释选中的行

#+END_QUOTE
   
** DONE emacs指定模板创建文件
   CLOSED: [2019-01-23 Wed 16:30] SCHEDULED: <2019-01-21 Tue>
   - State "DONE"       from "TODO"       [2019-01-23 Wed 16:30]
   #+BEGIN_QUOTE
   yasnippet do anything
   #+END_QUOTE
** DONE emacs配置做软链到工作目录
   CLOSED: [2018-12-18 Tue 13:13]

   =ln -s=
** DONE 如何使用emms看视频？
   CLOSED: [2018-12-19 Wed 16:16]
   - State "DONE"       from "TODO"       [2018-12-19 Wed 16:16]
   - State "TODO"       from "DONE"       [2018-12-13 Thu 14:56]
   - State "DONE"       from "TODO"       [2018-12-12 Wed 21:55]
   #+BEGIN_QUOTE
   mplayer
  
   find /music/ -type f  | egrep '\.(mp3|ape)$' > /tmp/mylist.txt

   mplayer -playlist  /tmp/mylist.txt

   emms 快捷键
   #+BEGIN_SRC 
   (global-set-key (kbd "C-c e l") 'emms-playlist-mode-go)
   (global-set-key (kbd "C-c e s") 'emms-start)
   (global-set-key (kbd "C-c e e") 'emms-stop)
   (global-set-key (kbd "C-c e n") 'emms-next)
   (global-set-key (kbd "C-c e p") 'emms-pause)
   (global-set-key (kbd "C-c e f") 'emms-play-playlist)
   (global-set-key (kbd "C-c e o") 'emms-play-file)
   (global-set-key (kbd "C-c e d") 'emms-play-directory-tree)
   (global-set-key (kbd "C-c e a") 'emms-add-directory-tree)
   #+END_SRC

   #+END_QUOTE

** DONE emacs如何处理博文头部尾部嵌套跳转页问题
   CLOSED: [2019-01-25 Fri 11:48] SCHEDULED: <2019-01-23 Tue>
   - State "DONE"       from "TODO"       [2019-01-25 Fri 11:48]
   #+BEGIN_QUOTE
   作者写的很详细，参考解决此问题

   http://www.langdebuqing.com/emacs%20notebook/%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F.html
   
   #+BEGIN_VERSE
   │── templates                # html 模版目录。导出 html 时会根据相关配置把这些模版放到 html 的合适位置。生产环境使用该目录n
   │   ├── html-head.html       # html head
   │   ├── postamble.html       # 放到 html 的尾部
   │   └── preamble.html        # 放到 html 的开始部分
   #+END_VERSE

   #+END_QUOTE
** TODO org-mode 导出中文pdf文件
   SCHEDULED: <2019-04-10 Wed>
** DONE 如何publish的时候直接push html到发布分支? 
   CLOSED: [2019-01-11 Fri 10:05] SCHEDULED: <2019-01-19 Sat>
   - State "DONE"       from "TODO"       [2019-01-11 Fri 10:05]
** DONE org-mode capture倒序添加新的task
   CLOSED: [2018-12-11 Tue 21:41]
   - State "DONE"       from "TODO"       [2018-12-11 Tue 21:41]
   #+BEGIN_QUOTE
   =prepend= 前置函数配置后即可,[[https://orgmode.org/manual/Template-elements.html#Template-elements][官方文档]]中提到14个参数
   #+BEGIN_SRC 
        ("r" "Read" entry (file+headline "~/github/org-pages/read.org" "Reading List")
         "* TODO  %?\n  %i\n"
         :prepend t)
   #+END_SRC
   #+END_QUOTE

   [[http://www.zmonster.me/2018/02/28/org-mode-capture.html][org-mode capture 文章]]
   
** DONE org-mode table中英文对齐问题
  CLOSED: [2018-11-09 Fri 12:35]
   - State "DONE"       from              [2018-11-09 Fri 12:35]
   #+BEGIN_QUOTE
   只需要设置org-table的字体为等宽字体
   #+BEGIN_SRC 
   ;; Org table font
   (custom-set-faces
   '(org-table ((t (:family "Ubuntu Mono derivative Powerline")))))
   #+END_SRC
   安装Ubuntu Mono derivative Powerline
   : git clone https://aur.archlinux.org/ttf-ubuntu-mono-derivative-powerline-git.git
   : makepkg -Acs
   : sudo pacman -U *.tar.xz
   #+END_QUOTE
** DONE 连接远程主机emacs alt键失灵问题
   CLOSED: [2018-11-09 Fri 12:35]
   #+BEGIN_QUOTE
   主要是因为xshell的配置问题

   文件-->属性-->终端-->键盘-->元(meta)键仿真 
   
   #+END_QUOTE
** DONE 远程开发代码备份与调用远程开发环境
   CLOSED: [2018-11-14 Wed 10:07]
  - State "DONE"       from "TODO"       [2018-11-14 Wed 10:07]
  #+BEGIN_QUOTE
简单说,win7环境下使用idea开发java，python,但是我想将代码自动同步到ubuntu上做备份;同时,python的运行环境使用vmware的ubuntu上的多版本python环境,实现本地使用idea开发，代码运行在远端linux上,当然java还是使用的物理机安装的环境

查看了下资料，idea官方说明有 [[http://www.jetbrains.com/help/idea/2017.1/remote-host-tool-window.html][sftp ]]这个功能,创建sftp服务连接 
=tool -> deployment -> +=

1. 本地开发的java项目备份到远端linux目录

   RemoteHost内配置好mappings，本地项目备份到ubuntu的路径
      
   右键项目Upload to 服务器

2. 使用linux python环境 写python项目

   =F4 -> project -> +  -> add remote=
      
   只需要本地开发编码不报错，运行可以同步到服务器运行
  
  #+END_QUOTE
** DONE emacs数据恢复问题
  CLOSED: [2018-11-14 Wed 10:08]
  - State "DONE"       from "TODO"       [2018-11-14 Wed 10:08]
  #+BEGIN_QUOTE
  =c-x u= 解决问题
  #+END_QUOTE
** DONE github git push 一直无响应
   CLOSED: [2018-12-07 Fri 13:18]
   - State "DONE"       from "TODO"       [2018-12-07 Fri 13:18]
    
  #+BEGIN_QUOTE
  github dns解析地址有问题

  /etc/hosts 配置下github的主机地址
  
  =192.30.253.113 github.com=

  #+END_QUOTE
    
** DONE ssh Permission denied (publickey)
   CLOSED: [2018-11-28 Wed 11:44]

   #+BEGIN_QUOTE
   在目标主机的 =/.ssh/authorized_keys= 文件内，添加id_rsa.pub
   #+END_QUOTE

** DONE arch下载百度云大文件
   CLOSED: [2018-11-29 Thu 14:47]
   - State "DONE"       from "TODO"       [2018-11-29 Thu 14:47]
     
   #+BEGIN_QUOTE
   [[https://github.com/iikira/BaiduPCS-Go][go实现的百度云大文件下载]] 使用文档很详细
   #+END_QUOTE

** DONE [[file:note/emacs-w3m.org][emacs快速调用chrome或者emacs-w3m打开链接]]
   CLOSED: [2018-12-07 Fri 11:57]

   - State "DONE"       from "TODO"       [2018-12-07 Fri 11:57]

** DONE org-mode 自动显示图片
   CLOSED: [2018-12-07 Fri 13:10]

   - State "DONE"       from "TODO"       [2018-12-07 Fri 13:10]
#+BEGIN_QUOTE

   M-x =org-toggle-inline-images= 参数用来控制org-mode图片显示

   快捷键 c-c c-x c-v

   ;配置图片默认显示大小

   =(setq org-image-actual-width 300)=

   [[file:images/index-0.jpg]]

   =c-c c-l= 修改url链接地址

#+END_QUOTE

** DONE 不重启emacs如何重新加载配置
   CLOSED: [2018-12-07 Fri 13:09]
   
   - State "DONE"       from "TODO"       [2018-12-07 Fri 13:09]
#+BEGIN_QUOTE
   M-x =eval-buffer=
#+END_QUOTE
  
** DONE rabbitmq队列数据量堆积过多，服务不正常问题解决?
   CLOSED: [2018-12-10 Mon 16:36]
   - State "DONE"       from "TODO"       [2018-12-10 Mon 16:36]
   #+BEGIN_QUOTE
   rabbitmq 队列数据堆积过多，导致queue无法取,只能写入，队列无法删除等诡异问题
   
   这里直接删除堆积的大量数据
   
   mq数据的存储目录 =var/lib/rabbitmq/mnesia/node_name/msg_stores= 删除数据，重启节点
   #+END_QUOTE
   
** DONE arch install yaourt
   CLOSED: [2018-12-11 Tue 19:03]

   
   - State "DONE"       from "TODO"       [2018-12-11 Tue 19:03]
   #+BEGIN_QUOTE
git clone https://aur.archlinux.org/package-query.git

git clone https://aur.archlinux.org/yaourt.git

makepkg -si

sudo pacman -U *.tar.xz


清华镜像:

使用方法：在 /etc/pacman.conf 文件末尾添加以下两行：

#+BEGIN_SRC 
[archlinuxcn]
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
#+END_SRC

之后安装 archlinuxcn-keyrin 包导入 GPG key。

sudo pacman -Sy yaourt base-devel fakeroot

yaourt -Syu --devel --aur
   #+END_QUOTE
   