
#+SETUPFILE: setup.org
#+TITLE: data structure
* 严蔚敏数据结构Video
** 绪论
  1. 数据结构范畴 

     算法 + 数据结构 = 程序设计

     算法: 对问题怎么处理

     数据结构：对条件规则,处理结果怎么输入输出
     
  2. 基本概念
     
     - 数据
       
       能被计算机处理的，能被计算机操作的对象，随着计算机的发展逐渐扩大，数字，图像，视频，多媒体信息

     - 数据元素

       数据项是数据结构中讨论的最小单位

       数据元素是数据项的集合

     - 数据结构

       带结构的数据元素的集合

       结构: 数据元素之间的关系
       
       数据的逻辑结构可归结为4类: 线性结构、树形结构、图状结构、集合结构

       数据结构的形式定义: 是一个二元组 Data-Structures = (D,S) D是数据元素上的有限集,S是D上的关系

       数据的存储结构: 逻辑结构在计算机中的表示，逻辑结构在存储器中的映象
       
       逻辑结构表现：数据元素的集合 + 关系的集合

       #+BEGIN_QUOTE
       数据元素的映象方法：计算机中表示数据的最小元素是二进制位(bit) 

       关系的映象方法: 
        - 顺序映象 :以存储位置的相邻表示后继关系 y的存储位置和x的存储位置相差一个常量C
        - 链式映象 :以附加信息(指针)表示后继关系
       #+END_QUOTE

     - 数据类型
       
       高级语言中每个变量常量表达式明确数据类型

       数据类型是值的集合和定义在此集合上的一组操作的总称
     - 抽象数据类型(Abstract Data Type ADT) 

       是指一个数学模型以及定义在此数学模型上的一组操作

       ADT两个特征:

       #+BEGIN_QUOTE
       1. 数据抽象

          用ADT描述程序处理的实体时,强调的是其本质的特征，其所能完成的功能以及和外部用户的接口

          复数不能直接加减

          初始化、取复数虚部、相加等方法
       2. 数据封装

          外部用户不关心方法如何实现的
       #+END_QUOTE

       ADT的表示和实现：借用固有数据类型来表示和实现


  3. 算法和算法的衡量
     
     一个有限常的操作序列

     算法的五个重要特性
     有穷性、确定性、可行性、有输入、有输出

** 线性表
   线性结构 是一个数据元素的有序(次序)集

   基本特征：
   #+BEGIN_QUOTE
   1. 唯一一个 第一元素
   2. 唯一的 最后元素
   3. 唯一的后继
   4. 唯一的前继
   #+END_QUOTE

   - 线性表的类型定义
     1. 抽象数据类型线性表的定义
        数据对象、
        数据关系
   - 线性表类型的实现-顺序映象
   - 线性表类型的实现-链式映象
   - 一元多项式的表示
* 数据结构与算法分析(Java语言描述)
** 1.引论
   数学、递归、java等基础
   如果除去对象的基本类型外,实现方法是相同的，那么我们可以用泛型实现来描述这种基本功能.
   泛型、自动装箱/拆箱
   泛型static方法 
   类型限界 type bound
   
** 2.算法分析
     数据读入是一个瓶颈

     计算运行时间，大O是一个上届，程序可能提前结束，但决不能错后

     - 一般法则:

       分析的基本策略是从内部向外展开工作的

      + 法则1 for循环

         一个for循环的运行时间至多是该for循环内部那些语句的运行时间*迭代次数

      + 法则2 嵌套的for循环

         从里向外分析这些循环。在一组嵌套循环内部的一条语句总的运行时间

         为该语句的运行时间乘以该组所有的for循环的大小乘积

         O(N^2)

      + 法则3 顺序语句

        将各个语句的运行时间求和即可，意味着最大值就是所得的运行时间

      + 法则4 if/else语句
        
        if + else

** 3.表、栈和队列

   最简单和最基本的三种数据结构

   实际上，每个有意义的程序都将显式的至少使用一种这样的数据结构，

   栈在程序中总是被间接的用到，不管程序是否做了声明

   ADT 抽象数据类型 是带有一组操作的一些对象的集合

   - 表ADT list
     1. 简单数组实现

        array

       数组是由固定容量创建的，使用数组的时候需要对表的大小进行评估

       如果对表做插入和删除操作，特别是对表的前段进行操作，数组就不合适
       
       最坏的O(N) 最好的O(1)
     2. 简单链表实现

        linked list

        为了避免插入和删除的线性开销，需要保证表可以不连续存储

        链表由一系列节点组成，这些节点不必在内存中相连。
        
        每个节点均含有表元素和到后继元素的link链，叫做next链

        最后一个节点的next链引用null

        在经典链表中，每个节点只存储到其下一个节点的链，

        存在指向前驱节点的链，我们称之为双链表

        LIST接口: 1.ArrayList 2.LinkedList
        
     - list adt 两种流行的实现方式

       1. ArrayList
        
        一种可增长数组的实现，
        优点：对get/set方法调用花费常数时间
        缺点: 插入/删除 代价昂贵    
       2. Linkedlist
          
          双链表的实现
          
          优点：插入/删除 开销很小
          缺点：get的索引操作 不容易 采用迭代器的方式更高效的取数据 
   - 栈ADT stack
     
     栈stack是限制插入和删除只能在一个位置的表，该位置是表的末端，叫做栈的顶端（top）

     栈有时又叫做LIFO表（后进先出）

     push 进栈

     pop  出栈
   - 队列ADT queue
     
     和栈一样队列也是表，使用队列时，插入在一端进行，删除则在另一端进行。

     队又叫做FIFO表（先进先出）

     enqueue：入队  在表的末端(rear)插入元素
     
     dequeue：出队  删除在表开头(front)的元素
     
       
     
        


     
** 4.树
   
   根的深度为0，树叶的高度为0
   
   - 树的遍历: 
     1. 先序遍历
     2. 后序遍历
     3. 中序遍历

   - 二叉树
     binary tree 是一棵树，其中每个节点都不能有多于两个的儿子

     性质：一棵平均二叉树的深度要比节点个数N小的多

     树节点的声明类似双链表，节点包含element，和leftkk、right引用

     二叉查找树: 对于树中的每个节点X,它的左子树中所有项的值小于X中的项，而它的右子树中所有项的值大于X中的项

* Introduction to Algorithms
** 基础知识
   计算时间是一种有限的资源，存储器中的空间也是一样的,时间或空间方面有效的算法使你能够明智地使用这些资源
*** 算法基础
* Leetcode
** LeetCode 3 --- Longest Substring Without Repeating Characters
** LeetCode 4 --- Median of Two Sorted Arrays

 logn 堆排序 归并排序 快速排序

 n 桶排序