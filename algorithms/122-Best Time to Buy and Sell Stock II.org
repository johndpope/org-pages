#+SETUPFILE: setup.org
#+TITLE: 122.Best Time to Buy and Sell Stock II


Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. 

You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:
#+BEGIN_EXAMPLE
Input: [7,1,5,3,6,4]
Output: 7

Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
#+END_EXAMPLE
Example 2:
#+BEGIN_EXAMPLE
Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, 
             as you are engaging multiple transactions at the same time. 
             You must sell before buying again.
#+END_EXAMPLE
Example 3:
#+BEGIN_EXAMPLE
Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
#+END_EXAMPLE


* 题意分析

  给定一个数组，可以多次买入卖出，求最大利益

  每次操作取极大值、极小值

* java

#+BEGIN_SRC java
class Solution {
    public int maxProfit(int[] prices) {
            int profit = 0, i = 0, j;
            while (i < prices.length) {
                j = i;
                while (j < prices.length - 1 && prices[j] < prices[j+1]) j=j+1;
                profit += (prices[j] - prices[i]);
                i = j + 1;
            }
            return profit;
    }
}
#+END_SRC

* python 

#+BEGIN_SRC 
class Solution(object):
    def maxProfit(self, prices):
        """
        :param prices: List[int]
        :return: int
        """
        res, i = 0, 0
        while i < len(prices):
            j = i
            while j + 1 < len(prices) and prices[j + 1] > prices[j]:
                j += 1
            res += prices[j] - prices[i]
            i = j + 1
        return res
#+END_SRC