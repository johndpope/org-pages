#+SETUPFILE: setup.org
#+TITLE: 199. Binary Tree Right Side View

Given a binary tree, imagine yourself standing on the right side of it, 

return the values of the nodes you can see ordered from top to bottom.

Example:

#+BEGIN_EXAMPLE

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
#+END_EXAMPLE

* 题意分析

  站在树右边 视野能够看到的节点

* 一、Depth-First Search
: 1.深度遍历：根结点 ---> 左子树 ---> 右子树,保证同一层最后一个录入栈内的数据为最右节点
: 2. 时间复杂度O(n) 空间复杂度O(2n)

** 1.1 java 实现DFS

#+BEGIN_SRC java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        HashMap<Integer, Integer> rightSideViewMap = new HashMap<Integer, Integer>();
        int max_depth = -1;

        Stack<TreeNode> nodeStack = new Stack<TreeNode>();
        Stack<Integer> depthStack = new Stack<Integer>();

        nodeStack.push(root);
        depthStack.push(0);

        while (!nodeStack.isEmpty()) {
            TreeNode node = nodeStack.pop();
            int depth = depthStack.pop();
            if (node != null) {
                max_depth = Math.max(max_depth, depth);
                if (!rightSideViewMap.containsKey(depth)) {
                    rightSideViewMap.put(depth, node.val);
                }
                nodeStack.push(node.left);
                nodeStack.push(node.right);
                depthStack.push(depth + 1);
                depthStack.push(depth + 1);
            }
        }

        ArrayList<Integer> rightSideViewList = new ArrayList<Integer>();
        for (int i = 0; i <= max_depth; i++) {
            rightSideViewList.add(rightSideViewMap.get(i));
        }
        return rightSideViewList;

    }
}

#+END_SRC

** 1.2 python 实现DFS

: list作为stack栈使用

#+BEGIN_SRC  java
class Solution(object):
    @staticmethod
    def rightSideView(root):
        rightmost_value_at_depth = dict()  # depth -> node.val
        max_depth = -1

        stack = [(root, 0)]
        while stack:
            node, depth = stack.pop()

            if node is not None:
                # maintain knowledge of the number of levels in the tree.
                max_depth = max(max_depth, depth)

                # only insert into dict if depth is not already present.
                rightmost_value_at_depth.setdefault(depth, node.val)

                stack.append((node.left, depth + 1))
                stack.append((node.right, depth + 1))

        return [rightmost_value_at_depth[depth] for depth in range(max_depth + 1)]
#+END_SRC

* 二、Breadth-First-Search
: 1. 广度优先遍历 根节点-->右节点-->左节点 需要将每层最右端数据第一个录入到队列
: 2. 时间复杂度O(n) 空间复杂度 O(n)
** 2.1 java
#+BEGIN_SRC java
    /**
     * bfs 队列实现
     * @param root
     * @return
     */
    public List<Integer> rightSideView(TreeNode root) {
        HashMap<Integer, Integer> rightSideViewMap = new HashMap<Integer, Integer>();
        LinkedList<TreeNode> nodeQueue = new LinkedList<TreeNode>();
        LinkedList<Integer> depthQueue = new LinkedList<Integer>();
        nodeQueue.offer(root);
        depthQueue.offer(0);
        int max_depth = -1;

        //Queue使用时要尽量避免Collection的add()和remove()方法，而是要使用offer()来加入元素，使用poll()来获取并移出元素。
        // 它们的优点是通过返回值可以判断成功与否，add()和remove()方法在失败的时候会抛出异常。
        // 如果要使用前端而不移出该元素，使用element()或者peek()方法。
        while (!nodeQueue.isEmpty()) {
            TreeNode node = nodeQueue.poll();
            Integer depth = depthQueue.poll();
            if (node != null) {
                max_depth = Math.max(max_depth, depth);
                if (!rightSideViewMap.containsKey(depth)) {
                    rightSideViewMap.put(depth, node.val);
                }
                // 队列先进先出，需要线把right节点放入
                nodeQueue.offer(node.right);
                depthQueue.offer(depth + 1);
                nodeQueue.offer(node.left);
                depthQueue.offer(depth + 1);
            }
        }

        ArrayList<Integer> rightSideViewList = new ArrayList<Integer>();
        for (int i = 0; i <= max_depth; i++) {
            rightSideViewList.add(rightSideViewMap.get(i));
        }
        return rightSideViewList;
    }
#+END_SRC

* 三、Traversal
** 3.1 java
#+BEGIN_SRC java 

    /**
     * 递归实现  保证每层最右节点第一个被处理
     *
     * @param root
     * @return
     */
    public List<Integer> rightSideView(TreeNode root) {
        ArrayList<Integer> rightSideViewList = new ArrayList<Integer>();
        bfs(root, rightSideViewList, 0);
        return rightSideViewList;
    }

    private void bfs(TreeNode root, List<Integer> rightSideViewList, int depth) {
        if (root == null) return;
        if (depth == rightSideViewList.size()) {
            rightSideViewList.add(root.val);
        }
        bfs(root.right, rightSideViewList, depth + 1);
        bfs(root.left, rightSideViewList, depth + 1);
    }
#+END_SRC