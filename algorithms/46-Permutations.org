#+TITLE: 46.Permutations

Given a collection of distinct integers, return all possible permutations.

Example:

#+begin_example
Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
#+end_example


* 题意分析

给一个不重复整数集，输出所有可能组合

思路：

回溯法处理遍历所有情况问题

1(234)->12(34)->123(4)

* java
#+BEGIN_SRC java
class Solution {

    public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        backtrack(list,nums,0);
        return list;
        
    }
    
    public List<List<Integer>> backtrack(List<List<Integer>> list,int[] nums,int start){
        
         if(start >= nums.length){
             List<Integer> tempList = convertArrayToList(nums);
             list.add(tempList);
         }
        
        for(int i = start ; i < nums.length ;i++){
            swap(nums,start,i);
            backtrack(list,nums,start+1);
            swap(nums,start,i);
        }
        
        return list;
        
    }
    
    private List<Integer> convertArrayToList(int[] nums){
        
        List<Integer> list = new ArrayList<Integer>();
        for(int i = 0 ; i <nums.length;i++){
            list.add(nums[i]);
        }
        
        return list;
        
    }
    
    private void swap(int[] num,int i ,int j){
        int temp = num[i];
        num[i] = num[j];
        num[j] = temp;
    }
}
#+END_SRC


* python