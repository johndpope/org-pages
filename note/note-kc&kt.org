#+OPTIONS: toc:2
#+OPTIONS: ^:nil
#+SETUPFILE: setup.org
#+TITLE:kyoto Cabinet & Tycoon kv 型离线数据库
这里是 [[http://fallabs.com/kyotocabinet/][cabinet]] 和 [[http://fallabs.com/kyototycoon/][tycoon]] 的官方地址,简单的说，cabinet提供存储服务,
tycoon提供网络连接服务,两者配合使用，作为一款kv型离线数据库使用，
备份及其方便，占用空间小，适用于高qps的api接口服务，此处记录下，在使用
这款小众kv数据库中的一些记录. 

目前项目使用中数据量为亿级，由于作者已经不再维护此项目，项目kv单机数据库
切换为pika.

cabinet数据落地的存储类型有两种:
- 以kch结尾的文件
  #+BEGIN_QUOTE
  代表使用hash表存储数据，每个操作的时间复杂度是 O(1) 
  #+END_QUOTE
- 以kct结尾的文件
  #+BEGIN_QUOTE
  代表使用B+ tree表存储数据，每个操作的时间复杂度是 O(log N),

  但B+ tree数据库支持对key顺序的连续访问，这可以实现对字符串的

  前向匹配查找和整数的范围查找
  #+END_QUOTE

* install cabinet & tycoon
#+BEGIN_QUOTE
1. install cabinet
   : wget http://fallabs.com/kyotocabinet/pkg/kyotocabinet-1.2.76.tar.gz
   : tar xzvf kyotocabinet-1.2.76.tar.gz
   : cd kyotocabinet-1.2.76
   : ./configure && make && make install && cd ..
   : rm kyotocabinet-1.2.76* -rf

2. install cabinet python binding
   : wget http://fallabs.com/kyotocabinet/pythonlegacypkg/kyotocabinet-python-legacy-1.18.tar.gz
   : tar xzvf kyotocabinet-python-legacy-1.18.tar.gz
   : cd kyotocabinet-python-legacy-1.18
   : python setup.py install
   #fix 'libkyotocabinet.so.16: cannot open shared object file: No such file or directory' error
   : echo "/usr/local/lib" >> /etc/ld.so.conf.d/usrlocal.conf
   : ldconfig -v && cd ..
   : rm kyotocabinet-python-legacy-1.18* -rf

3. install tycoon
   : wget http://fallabs.com/kyototycoon/pkg/kyototycoon-0.9.56.tar.gz
   : cd kyototycoon-0.9.56
   : sed -i '24a\#include <unistd.h>' ktdbext.h
   : ./configure && make && make install
   #fix ktserver: error while loading shared libraries: libkyototycoon.so.2: cannot open shared object file: No such file or directory
   : cp libkyototycoon.so.2 /usr/lib
   : ldconfig -v && cd ..
   : rm kyototycoon* -rf
#+END_QUOTE

* tycoon 服务端
#+BEGIN_QUOTE
ktserver 作为服务端，提供数据库网络连接服务,其常用到的参数说明如下:
: port num : 指定需要绑定的端口号。默认端口号为1978
: th num : 指定线程数
: le : 日志记录级别---error
: ls : 日志记录级别---system
: onl : opens the database with the no locking option. 
: pid file: 输出进程ID 到指定文件（这里指定文件名 
: plsv file :  #支持memcache需要指明共享库/usr/local/libexec/ktplugservmemc.so
: plex str : #指定了可插拔服务器配置的表达 port=8902 通过memcache访问kt的端口
: tout num : 指定每个会话的超时时间（单位为秒）。默认永不超时
: bnum 指定哈希表的桶数量。官方推荐是记录数的两倍或者更高。   10 million : bnum=20000000
: msize 指定内存映射区域大小 小于系统内存  10 million : 10G
: dfunit 设定一个值，当碎片数超过这个值系统就进行碎片整理。 
: dmn   以daemon方式启动。 

官方推荐两种启动kt服务方式:

- Typical Server Setting
  #+BEGIN_SRC 
   ktserver -port 8901 \
           -th 32    \
           -log /var/log/kt_compromise.log \
           -le -onl   \
           -pid /var/log/kt_compromise.pid \
           -tout 10   \
           -plsv /usr/local/libexec/ktplugservmemc.so  \
           -plex port=8902 
           /root/data/compromise.kch#opts=l#bnum=5120000#msiz=3g#dfunit=8
   #+END_SRC
- On-memory Server Setting

  数据加载到内存的方式 一般用来替代memcached服务,kt的空间使用效率要
  比memcached好,1000w每条1k文档存储到库内，需要10GB内存,kt服务一般
  会占用服务器65%左右内存
  
  在这种on-memory 模式下启动的数据库，备份快照方式同redis相同,
  定期将内存中的数据存入到目录,重启服务的时候，会将所有文档重新加载
 
  启动server后每10秒钟做快照以lzo压缩备份到/home/manue1目录下
  #+BEGIN_SRC 
    ktserver -port 2000 \
             -bgs /home/manue1/
             -bgsi 10 
             -bgsc lzo
             :#bnum=2000000#ktcapsiz=2g
   #+END_SRC


#+END_QUOTE
* tycoon 客户端
#+BEGIN_QUOTE
ktremotemgr 作为一款连接kt server的客户端工具,下面给出简单示例:

  插入数据

  ~ktremotemgr set -host 127.0.0.1 -port 8901 manue1 360~

  查询

  ~ktremotemgr get -host 127.0.0.1 -port 8901 manue1~

  删除

  ~ktremotemgr remove -host 127.0.0.1 -port 8901 manue2~

  列出所有key

  ~ktremotemgr list -host 127.0.0.1 -port 8901~
#+END_QUOTE

* hot backup
#+BEGIN_QUOTE
tycoon 以本地离线文件的信息存储到磁盘，迁移的时候可以直接使用快照或者库文件，
下面提供热备份的详细步骤:

1. dbbackup.sh It must have executable permissions
   #+BEGIN_SRC 
    #! /bin/sh
    srcfile="$1"
    destfile="$1.$2"
    cp -f "$srcfile" "$destfile"
   #+END_SRC
2. ktserver -cmd  -ulog  set
   #+BEGIN_SRC 
     server -port 1978 \
            -th 32    \
            -log /var/log/kt_malfile.log  \
            -sid 1 \
            -ulog /var/log/backup_update_log \
            -cmd /home/s/apps/malicious.file/tools \
            -li  \
            -pid  /var/log/kt_malfile.pid \
            -tout 10   \
            -onl   \
            -plsv /usr/local/libexec/ktplugservmemc.so  \
            -plex port=1979 \
            /root/data/malfile.kch#opts=l#bnum=5120000#msiz=3g#dfunit=8
   #+END_SRC
3. ktremotemgr make a backup file  

   ~ktremotemgr  sync -cmd dbbackup.sh~

4. recover kt data

   $1 is interactive arg : 01524834405899000000
   #+BEGIN_SRC 
   rm  /root/data/malfile.kch -f
   cp   /root/data/malfile.kch.$1  /root/data/malfile.kch
   kttimedmgr recover -ts $1 /root/data/malfile.kch /var/log/backup_update_log
   #rm /var/log/backup_update_log/* -f
   #+END_SRC

#+END_QUOTE
