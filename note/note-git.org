#+TITLE: git note
蒋鑫. Git权威指南 机械工业出版社. Kindle 版本. 
* git 独奏
** git 初始化
    - git init 
      
      初始化git项目
    - .git
      
      版本库存放目录
    - git config
      修改配置文件
      + git config -e 

        修改 =.git/config=
      + git config -e --global
        
        修改 =~/.gitconfig=
      + git config -e --system

        修改 =/etc/gitconfig=
      + git config <session>.<key>
      
        读写配置文件的属性
        =$GIT_CONF=test.ini git config a.b= 来处理其他配置文件
      + git config --global alias.ci "commit -s"
        设置别名
    - git clone note  note-bak
      备份项目
** git 暂存区

   [[http://7xpyfe.com1.z0.glb.clouddn.com/2017101515080826245091.png]]

   工作区、暂存区、版本库
   - git status -s
   - git log --pretty=oneline
   - git add note-git.org 

     添加到暂存区
   - git checkout -- note-git.org
     
     暂存区-->工作区
   - git diff 
     
     [[http://7xpyfe.com1.z0.glb.clouddn.com/20171015150808301278029.png]] 

     diff介绍 

     diff 比较工作区、暂存区、版本库代码

     git diff 比较工作区和暂存区

     git diff --cached 比较暂存区和HEAD

     git diff HEAD 比较工作区和HEAD

     git diff <commit1><commit2> -- <paths>  比较不同版本文件的差异
   - git stash
     
     保存进度，暂存状态
** git reset 重置
   
   1. git reset HEAD<path>  相当于取消 git add <paths> 操作

   2. git reset --hard master@{2}  重置master所有位置为两次改变之前的值

                --soft       只改变引用的指向，不改变暂存区和工作区

                --mixed      更改引用的指向，重置暂存区，不改变工作区

   - git reset --soft HEAD^ 放弃最新的提交
   - git reset HEAD filename

** git 检出
   
   - git checkout branch_name

     git branch -v
   - git checkout--filename  用暂存区的文件覆盖工作区的 取消上次add
** git 恢复进度
   
   - git stash
     
     git stash list
     
     git stash pop 从最近保持的进度恢复

     git stash drop 默认删除最新的进度

     git stash clear 删除所有进度

     git stash branch <branchname>  基于进度创建分支

** git 基础操作
   - 删除文件

     git ls-files 查看暂存区文件

     git rm filename 删除暂存区文件

     git reset --hard HEAD^ 重置上次提交的删除操作

     git add-u 快速标记操作,下次提交会生效
   - 恢复文件
     
     git show HEAD~1:circl.html > circl.html

     git checkout HEAD~1 -- circl.html
   - 移动文件
     
     git mv a b
   - 选择性添加
     
     git add -i 交互窗口
   - 文件忽略

     在工作目录下添加.gitignore

     =*.pyc=

     git status --ignored -s 可以查看哪些文件被忽略了

     git add -f filename 或略的文件强制更新
     
     git commit -a -m  "偷懒了 直接提交 不用 git add"
   - 文件归档

     git archive -o lastest.zip HEAD  最新归档

     git archive -o partial.tar HEAD src doc  只归档两个文件夹
     
** git tools
   版本库浏览器能更好看提交关系图
   1. gitk
   2. gitg
   3. qgit
   4. 命令行
      - git log 

        git config --global alias.glog "log --graph"  使用:git glog --oneline
      - 文件追溯

        git blame filename 逐行显示谁编辑的 追踪bug!
      - 二分查找

        找到一个好版本和坏版本,在中间版本的master上执行

        git bisect start

** 改变历史
   - 单步悔棋

     git commit --amend  修改commit原因

     git checkout HEAD^ --filepath 还原删除的文件到暂存区
   - 多步悔棋
     git reset --soft HEAD^^ 后退两个版本到暂存区
     
     git commit -m "new reason "
     
** git克隆
   - git clone

     git clone <rep> dir
     
     git clone --bare <rep> dir

     git clone --mirror <rep> dir
   - git push
   - git pull
     
* git 和声
** git 工作协调   
   - 支持的协议
     智能协议: 数据传输过程中有清晰的进度显示,按需传输，传输量小，速度快 (ssh,git,file//)  
     哑协议: 创术速度慢，传输进度不可见，不知道什么时候完成数据传输(ftp,rsync)
   - 强制非快进式推送

     git rev-list HEAD  本地版本库最新提交

     git ls-remote origin 远程版本库的引用

     git push 报non-fast-forward updates were rejected 不可以git push -f 强制更新
   - 合并后推送
      
     git pull = git fetch + git merge

     git log --graph --oneline

     git push
     
     
** git 冲突解决

   git merge

   1. 自动合并

      git fetch

      git merge refs/remotes/origin/master

      git push

      git log -1 -m --stat  m参数可以查看合并操作
   2. 逻辑冲突
      - 修改文件名，其他文件引用了原来的文件名
      - 函数修改了返回值,但其他地方调用的还是原来的返回值函数
   3. 冲突解决
      - <<<<<<<(七个小于号) 和 ======= (七个等于号)
        
        当前分支所更改的内容
      - =======(七个等于号) 和 >>>>>>> (七个大于号)

        所要合并的版本要更改的内容

      git add / git reset
   4. 树冲突
   5. 合并策略
      - resolve
      - recursive

* [[http://mazhuang.org/wiki/git/][common questions]]
** git ls-files 乱码问题

   在 =~/.gitconfig= 中添加如下内容
   #+BEGIN_SRC 
    [core]
       quotepath = false
    [gui]
       encoding = utf-8
    [i18n]
       commitencoding = utf-8
    [svn]
       pathnameencoding = utf-8
   #+END_SRC

** change git push user

   git config user.name 'xxx'
   
   git config user.email 'xxx'
** create branch

   查看本地分支   =git branch=
   
   查看远程分支  =git branch -a=

   创建本地分支，并切换到分支 =git branch manue1= =git checkout manue1=
   
   推送创建新的远程分支 =git push origin manue1=
   
** merge branch

合并manue1分支到dev =git merge manue1=

   
** git add tag
   
   https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE

   git tag -a v1.4 -m 'my version 1.4'
   
   git push origin --tags #一次推送所有本地新增的标签上去