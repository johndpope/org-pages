#+TITLE: Docker能替代Vbox吗?
* Docker入门
** 初识Docker
可以简单的将Docker容器理解为一种沙盒，每个容器内运行一个应用，不同的容器互相
隔离，容器之间可以建立通信机制。容器的创建和停止都十分快速，容器自身对资源的
需求也十分有限，远远低于虚拟机。
   
与传统虚拟机比较，Docker容器快，对系统资源需求少，一台主机可以运行数千个
Docker容器,docker通过git的操作管理减少学习成本，通过Dockerfile配置文件来
灵活自动化创建和部署

传统方式是硬件层面实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统层，
Docker容器是操作系统层面上实现的虚拟化，直接复用本地主机的操作系统，因此更加
轻量级

** Docker核心概念
   1. Image
   2. Container

      镜像自身是只读的，容器从镜像启动的时候，Docker会在镜像的最上层创建
      一个可写层，镜像本身将保持不变
   3. Repository

      Docker集中存放镜像文件的场所

      目前最大的公开仓库是Docker Hub 国内 Docker Pool

      Registry 注册服务器包含众多Repository

** Docker install
安装docker[[https://docs.docker.com/engine/installation/][官网]] 有详细说明,国内网速很慢，采用了阿里云的[[https://yq.aliyun.com/articles/7695][镜像源]]

: curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet | sh -
* Docker Image
** 获取镜像
   docker pull NAME[: TAG] 

   =docker pull ubuntu=

   =docker pull registry.hub.docker.com/ubuntu :latest=

   不指定TAG默认选择latest标签,最新版本的镜像

** 查看镜像信息

   =docker images=  #查看本地所有镜像

   =docker inspect 747cb2d60bbe= #查看镜像信息
   
** 搜寻镜像
   
   =docker search mysql= #搜索远端仓库中共享的镜像

   =docker search k8s --no-trunc=false --filter=stars=1 --filter=is-automated=true=
     
   #+BEGIN_QUOTE
     --filter=is-automated=true #只显示自动创建的镜像

     --no-trunc=false  #输出信息不截断显示

     --filter=stars=0 #指定星级以上的镜像
   #+END_QUOTE
** 删除镜像

   docker rmi IMAGE[IMAGE..] #IMAGE可以是标签或者是ID

   =docker rmi ff4 -f=

   image 创建的容器存在的时候，是无法删除的 -f 强制删除

** 创建镜像
   1. 基于已有image的容器创建

     docker commit [OPTIONS] CONTAINER [REPOSITORY[: TAG]]

     =docker commit -m "add a test" -a 'manue1' -p 836 centos_test:v1.0=

     #+BEGIN_QUOTE
     -a 作者 -m  提交信息 -p 提交时暂停容器运行
     #+END_QUOTE
   2. 基于本地模版导入

      [[https://openvz.org/Download/template/precreated][下载系统镜像模板]]

      cat xx.tar.gz | docker import - ubuntu:16.04
   3. 基于Dockerfile创建（推荐）
** 存出和载入镜像

   docker save -o ubuntu-16.04.tar ubuntu:latest

   docker load --input ubuntu-16.04.tar

** 上传镜像

   docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]

   docker push TARGET_IMAGE[: TAG]

   需要先修改本地仓库name为远程仓库名，必须先创建远程仓库manue1sec/test

   =docker tag 3a4 manue1sec/test:u_test=

   =docker push manue1sec/test=
* Docker Container
** 创建容器
     =docker create -it ubuntu=

     =docker run -it ubuntu /bin/bash= (推荐)
     #+BEGIN_QUOTE
      #创建并启动容器
      -t 启动一个虚拟终端
      -i 保持终端
      -d 在后台守护运行
      -P Publish all exposed ports to random ports 
      -v 数据卷
      --rm  Automatically remove the container when it exits 
     #+END_QUOTE
** 启动终止容器
     docker start d3e

     docker kill ce5 

     docker ps -a #显示所有容器
** 进入容器
     docker attach 18a

     docker exec -ti 24c /bin/bash  (推荐)
** 删除容器
     =docker rm 18a=
** 导入和导出容器

     docker export 18a > ubuntu_container.tar  作为镜像

     docker import a.tar

* Docker Data 
** Data Volumes
   数据卷是一个可供容器使用的特殊目录,它绕过文件系统,类似于文件mount操作

   1. 数据卷可以在容器之间共享和重用
   2. 对数据卷的修改会立马生效
   3. 对数据卷的更新不会影响镜像
   4. 卷会一直存在直到没有容器使用
      
   - 创建数据卷

     =docker run -dit -P --name web -v /tmp/webapp training/webapp python app.py=
     #+BEGIN_QUOTE
     -v 数据卷挂在容器内/tmp/webapp     #多次使用可以创建多个数据卷

     -v /src/webapp:/tmp/webapp:ro  加载主机的/src/webapp目录到容器的/tmp/webapp :ro为修改默认rw权限为只读
     #+END_QUOTE
     =docker run  -itd --rm -P --name iou  -v ~/github/web-iou-docker/iou-web:/tmp/web-iou  a35 /bin/bash=
   
** Data Volume Containers
   在容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器

   =docker run -dit -v /dbdata --name data_vc ff4=  #创建数据卷容器

   在其他容器中使用--volumes-from来挂在dbdata容器中的数据卷

   =docker run -dit --volumes-from data_vc --name db1 ff4=

   =docker run -dit --volumes-from data_vc --name db2 ff4=

   此时在任意容器上都存在/dbdata共享目录
   
** 利用数据卷容器迁移数据

   通过执行worker容器来数据备份恢复

   - 备份

     =docker run --volumes-from data_vc -v $(pwd):/backup --name back_worker ff4 tar cvf /backup/dbdata.tar /dbdata=
      
     备份data_vc上的/dbdata目录 到本地dbdata.tar压缩文件内
     
   - 恢复

     =docker run --volumes-from data_vc -v $(pwd):/dbdata ff4 tar xvf /dbdata/dbdata.tar=

     从本地备份tar文件恢复数据
* Docker network
** 端口映射实现访问容器
   docker run -itd --rm -P 
   
   #+BEGIN_QUOTE
   -p docker_port:8080 指定映射端口

   -P 动态分配 

   #+END_QUOTE
** 容器互联实现容器间通信
* Dockerfile
  
  dockerfile 文件书写参考官方文档 ^^
   
         