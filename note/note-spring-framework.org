#+SETUPFILE: setup.org
#+TITLE: spring boot 初体验
* note-spring-project
** spring-boot
*** spring boot cli
    https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/
    
    spring-boot-cli-2.0.0.BUILD-20180109.181120-354-bin.tar.gz

    #+BEGIN_SRC 
#  spring boot
export PATH="/Users/manue1/opt/spring-boot-2.0.0/bin:$PATH"
    #+END_SRC

    spring --version
    
    spring init --list
    spring help init 

    创建一个springboot项目  mavne / gradle
    #+BEGIN_SRC 
 spring init \
-d=web \
-b=2.0.0.M7 \
-a=sb-cli \
-g=com.manue1 \
-j=1.8 \
-l=java \
--build=maven \
-n=sb-cli \
-p=jar \
-x
    #+END_SRC

    start first spring boot project 
    
    https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-annotations

     ./mvnw spring-boot:run 启动project

     
     
     mvn package

     jar -tvf target/sb-cli-0.0.1-SNAPSHOT.jar.original  #peek inside

     mvn clean

     - how to deploy jar

       deploy  original jar  to lib 

       #+BEGIN_SRC 
#!/usr/bin/env bash

# 脚本名称
PRG="$0"
#echo "PRG=$PRG"

# 脚本所在目录
HOME=`cd $(dirname "$PRG"); pwd`
#echo "HOME=$HOME"

# 找到所有lib下的依赖包
LIB=`find ${HOME}/lib/ -name "*.jar"`
#echo "LIB=$LIB"

# 日志目录
LOG=${HOME}/logs
#echo "LOG=$LOG"
if [ ! -d $LOG ];then
    mkdir -p $LOG
fi

classpath="."
for item in $LIB
do
  classpath=$classpath:$item

done
#echo "classpath=$classpath"

JVM_OPTS="-server -Xms128M -Xmx128M -Xloggc:$LOG/gc.log -XX:-PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -XX:+HeapDumpOnOutOfMemoryError"

for i in `ps aux | grep sb-cli-0.0.1 | grep -server | awk '{print$2}'`
do
  echo "kill "$i
  kill $i
done
echo "sleep 3s"
sleep 3

ulimit -n 65535

#nohup java $JVM_OPTS -cp $classpath com.manue1.sbcli.SbCliApplication > /dev/null 2>&1 &
#java $JVM_OPTS -cp $classpath com.manue1.sbcli.SbCliApplication


# debug jvm no test
DEBUG_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888"
#nohup java $JVM_OPTS ${DEBUG_OPTS} -cp $classpath com.manue1.sbcli.SbCliApplication > /dev/null 2>&1 &
#java $JVM_OPTS ${DEBUG_OPTS} -cp $classpath com.manue1.sbcli.SbCliApplication

echo "spring boot job start success."
       
       #+END_SRC


>>>>>>> f346d7973f1c8caefbad2f6e1e86f0546df81356

