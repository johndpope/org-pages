#+TITLE: jvm 虚拟机学习
* jvm
** Q & A
- 垃圾回收器需要关注的内容：
  1. 使用的垃圾回收器的种类
  2. Java堆的大小
  3. 新生代和老年代的大小
  4. 永久代的大小
  5. minor GC的持续时间
  6. minor GC的发生频率
  7. minor GC回收了多少空间
  8. major GC的持续时间
  9. major GC的频率
  10. 在一个并行的垃圾回收周期中回收的空间
  11. 垃圾回收之前和之后Java堆的占用空间
  12. 垃圾回收前后新生代和老年代的占用空间
  13. 垃圾回收前后永久区的占用空间
  14. 是老年代的占用空间还是永久代的占用空间超过阀值促发了一次major GC
  15. 应用程序是否显示调用了system.gc()方法
** 深入理解Java虚拟机
周志明. 深入理解Java虚拟机
*** 自动内存管理机制
**** java内存区域与内存溢出异常
***** 运行时数据区域
#+BEGIN_SRC 
  线程共享数据区     线程隔离数据区
| Method Area |   | VM Stack | Native Method Stack |
|-------------+---+--------------------------------|
| Heap        |   | Program Counter Register       |

   执行引擎     ->  本地库接口 -> 本地方法库
#+END_SRC
1. pc
   存放一条字节码指令，用来完成 分支，循环，跳转，异常处理

   每个处理器都会有一个独立的pc，各条线程之间的计数器不影响

   pc是唯一一个在jvm中没有规定OutofMemoryError情况的内存区域
2. vm stack
   为执行java方法服务
   
   stack 用于存储 局部变量、操作栈、动态链接、方法出口等

   每一个方法被调用直至完成的过程，就是对应一个栈帧在虚拟机栈中从入栈到出栈的过程

   方法运行期间不会改变局部变量表的大小

   StackOverFlowError 和 OutOfMemoryError 
3. Native Method Stacks

   为jvm使用Native方法服务

   不同的虚拟机的native方法实现都不同,语言也不同

   StackOverFlowError 和 OutOfMemoryError 
4. Heap
   此内存区域的唯一目的就是存放对象实例
   
   虚拟机启动时创建,线程共享内存最大的一块

   -Xmx和-Xms控制堆内存扩展

   OutOfMemoryError
5. Method Area
   此共享内存区,用来存放被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据

   方法区被描述为堆的一个逻辑部分

   Hotspot虚拟机上,人们把方法区称为"永久代" Permanent Generation

   gc在这个方法区比较少,但也不是永久的,回收的目标主要是对常量池的回收、类型的卸载

   OutOfMemoryError

   运行时常量池: 存放编译期生成的各种字面量和符号引用

                动态性：不要求常量一定只在编译期产生，运行期间也能将常量放入池中，如String的intern()方法
   
***** 对象访问
     最简单的访问,也会涉及java stack, java heap , method area 这三个最重要的内存区域
     
     Object obj = new Object()

     stack : "Object obj" 会反映的stack中，作为reference类型

     heap :  "new Object()" 在heap中形成长度不定的内存，存储实例数据值

     method area ； java heap中需要找到数据的对象类型(对象类型、父类、接口)，都存在方法区内
1. 句柄访问方式

优点： reference存储的是稳定的句柄地址,gc的时候移动对象时候，只会改变句柄中的实例数据的指针
 
      reference本身不需要改变

#+BEGIN_SRC 

|---------------+-----+---------------------------------------
| java vm stack |     | java  heap                            
|               |     |                                       
|---------------+-----+---------------------------------------
| reference     | --> | 句柄池                  实例池        
|               |     | 1.到对象实例数据的指针 -> 1.对象实例数
|               |     | 2.到对象类型数据的指针                  
|---------------+-----+-------- ↓ ----------------------------
|               |     | method area 1.对象类型数据              
|               |     |                                         
|               |     |                                         
|---------------+-----+-----------------------------------------


#+END_SRC
2. 指针访问方式

 优点: 速度快,节省了一次指针定位的时间开销

  sun hotspot 虚拟机采用这种

   reference变量中直接存储的就是对象的地址

#+BEGIN_SRC 

|---------------+-----+---------------------------------------
| java vm stack |     | java  heap                            
|               |     |                                       
|---------------+-----+---------------------------------------
| reference     | --> | 
|               |     | 1.对象实例数 包含 2.到对象类型数据的指针                  
|               |     | 
|---------------+-----+-------- ↓ ----------------------------
|               |     | method area 1.对象类型数据              
|               |     |                                         
|               |     |                                         
|---------------+-----+-----------------------------------------

#+END_SRC
***** OutOfMemoryError异常
内存 泄漏（ Memory Leak） 

内存 溢出（ Memory Overflow）

1. java堆溢出
   将堆最小值-Xms和最大值-Xmx 设置一样可避免堆自动扩展
   
<<<<<<< HEAD
   参数- XX：+ HeapDump OnOutOfMemoryError 出现内存溢出做快照以便后续分析

   java. lang. OutOfMemoryError: Java heap space

2. vm stack 和 native method stack 溢出

   HotSpot不区分虚拟机栈和本地方法栈，对于HotSpot来说，-Xoss参数 设置本地方法栈大小 是无效的，

   栈容量只由-Xss参数设定

   每个线程分配的stack容量越大,线程数就越少,建立线程时越容易把内存耗尽,开发多线程时候要注意栈溢出

   如window 32位 一个进程最多2g，这种栈溢出，可以采用减少最大堆和减少栈容量来处理多线程

3. 方法区内 常量池溢出

   -XX : PermSize 和 -XX : MaxPermSize 限制方法区大小

   PermGen space 永久代 常量池溢出

   方法区用于存放 Class的 相关信息

   如类名、访问修饰符、常量池、字段描述、方法描述等。

   对于这个区域的测试,基本的思路是运行时产生大量 的类去填满方法区,直到溢出

**** 垃圾回收器与内存分配策略
***** 为什么要回收和分配
 
1. 哪些内存需要回收？ 

  vm stack 、native method stack 、 method area
  生命周期伴随线程，大小也基本在类结构确定下来时就已知的,这些不需要回收

  java堆中，一个接口中的多个实现类需要的内存可能不一样，
  一个方法中的多个分支需要的内存也不一样，
  只有在程序运行是才知道创建哪些对象，这些内存分配和回收是动态的

2. 什么时候回收？ 

   java采用根搜索算法来判断对象是否存活,以GC root的对象作为起始点，向下搜索，
   搜索所走的路径叫引用链 reference chain

   当一个对象多GC Root没有任何引用链（gcroot到这个对象不可达）,则对象是不可用的

   + GC Root对象: 
     · 虚拟机栈（栈帧中的本地变量表）中的引用的对象。


3. 如何回收？

   内存动态分配和内存回收技术
   
   方法区回收主要：废弃常量和无用的类，
   回收效率很低，回收条件苛刻(1.java堆中不存在任何该类实例2.加载该类的ClassLoader已经回收3.没有引用)
   
   在堆中，尤其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%-95%的空间
     
***** 垃圾收集算法
      1. 标记-清除算法
         清除之后产生大量不连续内存碎片
      2. 复制收集算法
         先将内存按容量分为大小相同的两块，当一块内存用完，将存活的对象复制到另外一块上面,然后再把使用过的内存一次清洗掉
         
         这样不需要考虑内存碎片问题

         很多商业虚拟机都采用这种收集算法来回收新生代,HotSpot将新生代内存分为80%Eden和两个10%Survivor区域,
         预留10%的survivor空间来存储存活的对象
      3. 标记-整理算法
      
**** jvm监控与故障处理工具
1. jps jinfo
   运行的使用jvm的进程
2. jstat 
   
   jstat -gc 24612 250 10 250ms查询一次24612进程的gc情况，10次
3. jstack

4. jconsole
   
  内存监控 jstat 
   
  线程监控 jstack

5. Visual VM

*** 高效并发
1. java内存模型
   存储设备 (内存) < 高速缓存  < 处理器 
   计算操作从缓存同步内存设备中的数据，这样处理器就无须等待缓慢的内存读写

   多处理器系统内,每一个处理器都有自己的高速缓存,同时共享一个主内存，就会导致各自的缓存不一致,所以高速缓存要遵循一些协议
   
   java内存模型 JMM 的设计同上，在多个线程并发处理的时候，jvm采用ava内存模型来缓存存储设备上的数据,来实现高效并发

2. java与线程 

   线程既可以共享进程资源(内存地址、文件IO)，又可以独立调度(线程是CPU调度的最基本单位)

   java.lang.Thread类的实例就是一个线程
   
   
