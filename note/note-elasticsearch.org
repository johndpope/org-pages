#+SETUPFILE: setup.org
#+TITLE: elasticsearch 常用知识梳理

** cat command

  curl localhost:9200/_cat/shards/?v |grep -v STARTED |less

  curl -XGET 'localhost:9200/_cat/recovery/webasset_scan?v'

  ES 常用操作命令总结：
  1.索引状态

  curl localhost:9200/_cat/indices?v

  2.文件描述符

  curl localhost:9200/_nodes/stats/process?pretty | less

  3.集群健康

  curl localhost:9200/_cluster/health?pretty | less
  curl 'localhost:9200/_cluster/health?level=indices&pretty' | less
  curl localhost:9200/_cat/health?v| less
  curl 'localhost:9200/_cat/allocation?v'

  4.分片状态

  curl localhost:9200/_cat/shards/formal_webasset_scan?v

  5.当前任务

  curl localhost:9200/_tasks?pretty | less

  6.查看别名

  curl localhost:9200/webasset*/_alias?pretty |less

  7.查看 relocate 进度

  curl -XGET 'localhost:9200/_cat/recovery/ipasset_seer4?v'

  8.优化（慎用，会消耗全部可用资源，尤其是磁盘 io）

  curl -XPOST 'localhost:9200/threat_ip2/_optimize?max_num_segments=3&pretty'

  9.查看 segment

  curl localhost:9200/_cat/segments/ipasset_seer4?v

  新建索引

  curl -XPUT 'localhost:9200/index_name/?pretty' -d '{"settings":{"number_of_replicas":0}}'
  curl -XPOST localhost:9200/index_name/_mapping/type_name?pretty -d @mapping_file

  动态改副本数量

  curl -XPUT 'localhost:9200/index_name/_settings?pretty' -d '{"number_of_replicas":1}'

 1. 拉取数据后挂掉 先删除任务 (shard 重路由之前可以先尝试)

    curl -XDELETE 10.24.45.94:9200/_search/scroll/_all

 2. reroute

    curl -XPOST '10.24.45.94:9200/_cluster/reroute' -d @reroute.mapping

 3. 
** Mapping
1. 建立索引
   curl -XPUT 'localhost:9200/threat_ip_history/?pretty' -d{"settings":{"number_of_shards":20}}
   curl -XPUT '10.200.1.72:9200/ipasset_seer_lower/_settings'  -d {"number_of_replicas":1}
2. 设置 mapping 
   curl -XPOST 'localhost:9200/threat_ip_history/_mapping/ipv4?pretty' -d @mapping_file 

   mapping 存放到文件内
     #+BEGIN_SRC json
     
          {
            "ipv4": {
                "dynamic_templates": [
                    {
                        "notanalyzed": {
                            "mapping": {
                                "index": "not_analyzed",
                                "type": "string"
                            },
                            "match": "*",
                            "match_mapping_type": "string"
                        }
                    }
                ],
                "properties": {
                    "activity": {
                        "include_in_parent": true,
                        "properties": {
                            "threat_type": {
                                "index": "not_analyzed",
                                "type": "string"
                            },
                            "update_time": {
                                "format": "YYYY-MM-dd'T'HH:mm:ss",
                                "type": "date"
                            }
                        },
                        "type": "nested"
                    },
                    "ip": {
                        "fields": {
                            "raw": {
                                "type": "ip"
                            }
                        },
                        "type": "string"
                    }
                }
            }
          }
     #+END_SRC
3. 删除索引

  curl -XDELETE localhost:9200/index_name
  
** CURD

 1. 添加一条记录

  curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d  '{_source 内容}'

 2. 删除一条记录

    curl -XDELETE 'http://localhost:9200/twitter/tweet/1'

** Query
1. 基本查询
   
  curl -XGET 'http://localhost:9200/ipasset_seer4/asset_from_seer/_search?pretty&q=ip:210.186.226.178'

  curl -XGET  'localhost:9200/webasset_whois3/whois_info/_search?pretty&q=_id:PERSONALLICENCECOURSES.COM'
2. DSL 查询

   1.query bool must/filter match/term

     #+BEGIN_SRC 
  
       {
         "query": { 
           "bool": { 
             "must": [
               { "match": { "title":   "Search"        }}, 
               { "match": { "content": "Elasticsearch" }}  
             ],
             "filter": [ 
               { "term":  { "status": "published" }}, 
               { "range": { "publish_date": { "gte": "2015-01-01" }}} 
             ]
           }
         }
       }
  
     #+END_SRC
   2.query/sort
     #+BEGIN_SRC 
     {
            "query": {
                "bool": {
                    "must": [
                        {
                            "term": {
                                "ip.raw": "210.186.226.178"
                            }
                        }
                    ],
                    "must_not": [ ],
                    "should": [ ]
                }
            },
            "sort": {
              "started": "desc"
            },
        }
     #+END_SRC
** Alias

1. 创建 alias

 curl -XPOST 'localhost:9200/_aliases' -d '{"actions":[{"add":{"index" : "vulnerability_data_v4","alias" : "formal_vulnerability_data"}}]}'

2. 删除 alias

  curl -XPOST 'localhost:9200/_aliases' -d '{"actions":[{"remove":{"index" : "vulnerability_data_v4","alias" : "formal_vulnerability_data"}}]}'

3. 创建映射多个索引:

   #+BEGIN_SRC 
    curl -XPOST 'http://localhost:9200/_aliases'-d '  
    {  
        "actions" : [  
            { "add" : { "index" : "test1","alias" : "alias1" } },  
            { "add" : { "index" : "test2","alias" : "alias1" } }  
        ]  
    }'  
   #+END_SRC
** questions
*** from szie/scroll/search after

    http://www.jianshu.com/p/91d03b16af77

    在使用关系型数据库中，我们被告知要注意甚至被明确禁止使用深度分页，同理，在 Elasticsearch 中，也应该尽量避免使用深度分页

    深度分页的问题:CUP、内存、IO、网络带宽问题  10个shard*一亿条数据的doc_id

    - from size
      
      100+10、110+10.....10000+10 越往后请求的越多

    - scroll:

          query fetch merge

          查询结果缓存,每次fetch size*shard文档 merge输出
   
          scroll不适合做实时查询: 1.初始化结果缓存成快照 2.fetch数据，操作数据

          search_type。赋值为scan，表示采用 Scroll-Scan 的方式遍历，同时告诉 Elasticsearch 搜索结果不需要排序

          size 控制的是每个分片的返回的数据量而不是整个请求返回的数据量。

    - search after

      1.必须先要指定排序,记住坐标

      2.从任意一个位置 带上search_after=lastEmittedDocFieldValue 偏移量查数据

      如果我要做非常多页的查询时，最起码search after是一个常量查询延迟和开销，并无什么副作用。
      
      无论去到多少页，请求始终就是请求了size个docs,是个常量 

      业务折衷一：禁止跳页查询 只提供下一页
*** es shard 生命周期
    http://lxwei.github.io/posts/Elasticsearch-Shard-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html

    - 动态索引 

     三个关键的索引结构：倒排列表、临时索引、已删除列表 

     * 临时索引

       临时索引是在内存中实时建立的倒排索引，结果与倒排列表一样，
       只是存在于内存中，当有新文档时，实时解析文档并加到这个临时索引中

     * 已删除列表

       已删除列表存储已被删除的文档的文档ID
       一个文档被修改，搜索引擎一般删除旧文档，新建新文档,间接实现更新,
       这么做的原因主要是索引文件存储在磁盘文件，写磁盘不方便

     * 倒排列表

       倒排索引是已经建好的索引结果，倒排列表存在磁盘文件中，单词词典在内存中

       搜索操作：同时到内存和磁盘中查找，合并，然后利用已删除列表过滤文档

    - es动态更新

      segment是lucence定义的索引段，一个索引内包含多个，segment对外提供搜索服务

      新文档-->内存的buffer内-->写到磁盘生成新的segment，对外服务 同时清空buffer

      要频繁的写入磁盘十分消耗资源,es先将文档写到filesystem cache内，此时就能被搜索到了(linux下文件句柄要调整)

      必须调用fsync将segment刷到磁盘上，才能保证数据不丢失。
         
    - refresh/flush

      refresh是轻量级的写和打开一个新segment的操作

      Elasticsearch中，执行commit操作并删除translog的操作叫flush

    - segment merge

      如果不停的产生新的segment，Elasticsearch中很快就会段爆炸，
      每个段都要消耗文件描述符、内存、CPU 周期，且每个search请求都需要遍历所有的segment，会造成搜索操作很慢。

      _optimize?max_num_segments=1 一个segment情况下查询要快些，但是得控制大小，

*** es node

   -  data node 上

      http.enabled: false，同时也不要安装head, bigdesk, marvel等监控 插件
      http功能可以在非数据节点服务器上开启
      一台服务器上最好只部署一个Node

   -  避免脑裂现象
      1. discovery.zen.minimum_master_nodes N/2+1

         要选举一个Master需要多少了候选节点，默认为1
         3节点的集群 3/2+1 = 2(向下取整)
      2. discovery.zen.ping.timeout

         等待ping响应的超时时间，默认值是3秒。如果网络缓慢或拥塞，建议略微调大这个值
*** es pipeline

    https://www.felayman.com/articles/2017/11/24/1511527532643.html#b3_solo_h4_22

*** es 搜索原理

    https://blog.csdn.net/donghaixiaolongwang/article/category/6747676

    Elasticsearch之四种查询类型和搜索原理


** alias_malware 统计


1. 总数

   10.252.16.20:9200/_cat/count/alias_malware?v


|                               |        |            |
|-------------------------------+--------+------------|
| /_cat/count/alias_malware?v   | 总数   | 2446733188 |
|-------------------------------+--------+------------|
| /malfile-00/doc/_count?pretty | 单索引 |   27260935 |
|-------------------------------+--------+------------|
|                               |        |            |

2. network 是否存在

/alias_malware/doc/_count?pretty

#+BEGIN_QUOTE
{
    "query": {
        "exists" : { "field" : "network" }
    }
}

#+END_QUOTE

34081553



#+BEGIN_QUOTE
{
    "query": {
    	"bool": {
            "should": [
               { "exists" : { "field" : "network.domain" }},
               { "exists" : { "field" : "network.http" }},
               { "exists" : { "field" : "network.url" }},
               { "exists" : { "field" : "network.ip" }},
               { "exists" : { "field" : "network.udp" }},
               { "exists" : { "field" : "network.tcp" }},
               { "exists" : { "field" : "network.dns" }}
            ],
            "minimum_should_match": 1
    	}
    }
}

#+END_QUOTE

34082654


14534056