#+TITLE: elasticsearch 常用知识梳理

* elastic 常用的一些命令
  
  借用postman调用dsl还是很方便的

** cat 
- /_cat/indices?v :: 查看集群索引  
- /_cluster/health?pretty  :: 集群健康
- /_cat/shards/index_name?v :: 分片状态
- /_cat/segments/index_name?v :: 查看 segment

** mapping
- 建立索引 ::
          /index_name/?pretty' -d{"settings":{"number_of_shards":20}}
   
          /index_name/_settings'  -d {"number_of_replicas":1}
- 设置mapping  :: 
                curl -XPOST 'localhost:9200/index_name/_mapping/type?pretty' -d @mapping_file 

                mapping 存放到文件内
     #+BEGIN_SRC 

     {
       "ipv4": {
           "dynamic_templates": [
               {
                   "notanalyzed": {
                       "mapping": {
                           "index": "not_analyzed",
                           "type": "string"
                       },
                       "match": "*",
                       "match_mapping_type": "string"
                   }
               }
           ],
           "properties": {
               "activity": {
                   "include_in_parent": true,
                   "properties": {
                       "threat_type": {
                           "index": "not_analyzed",
                           "type": "string"
                       },
                       "update_time": {
                           "format": "YYYY-MM-dd'T'HH:mm:ss",
                           "type": "date"
                       }
                   },
                   "type": "nested"
               },
               "ip": {
                   "fields": {
                       "raw": {
                           "type": "ip"
                       }
                   },
                   "type": "string"
               }
           }
       }
     }
     #+END_SRC
- 删除索引 ::
          curl -XDELETE localhost:9200/index_name
- 动态改副本数量 ::
             curl -XPUT 'localhost:9200/index_name/_settings?pretty' -d '{"number_of_replicas":1}'
** alias
   
- _aliases add :: 创建 alias

                 : curl -XPOST 'localhost:9200/_aliases' -d '{"actions":[{"add":{"index" : "vulnerability_data_v4","alias" : "formal_vulnerability_data"}}]}'
                 
- _aliases remove :: 删除 alias
     : curl -XPOST 'localhost:9200/_aliases' -d '{"actions":[{"remove":{"index" : "vulnerability_data_v4","alias" : "formal_vulnerability_data"}}]}'
     
- _aliases actions :: 创建映射多个索引
   #+BEGIN_SRC 
    curl -XPOST 'http://localhost:9200/_aliases'-d '  
    {  
        "actions" : [  
            { "add" : { "index" : "test1","alias" : "alias1" } },  
            { "add" : { "index" : "test2","alias" : "alias1" } }  
        ]  
    }'  
   #+END_SRC
** query
- query_string 全文检索
  #+BEGIN_SRC python

  {
      "query":{
          "query_string":{
              "query":"reputation"
          }
      }
  }


  #+END_SRC
- _search?pretty&q=字段 :: 基础查询字段   

     : curl -XGET 'http://localhost:9200/ipasset_seer4/asset_from_seer/_search?pretty&q=ip:210.186.226.178'

     _id 内置id查询

     : curl -XGET  'localhost:9200/webasset_whois3/whois_info/_search?pretty&q=_id:PERSONALLICENCECOURSES.COM'
- exists :: 字段是否存在
            #+BEGIN_SRC 
{
    "query": {
    	"bool": {
            "should": [
               { "exists" : { "field" : "network.domain" }},
               { "exists" : { "field" : "network.http" }},
               { "exists" : { "field" : "network.url" }},
               { "exists" : { "field" : "network.ip" }},
               { "exists" : { "field" : "network.udp" }},
               { "exists" : { "field" : "network.tcp" }},
               { "exists" : { "field" : "network.dns" }}
            ],
            "minimum_should_match": 1
    	}
    }
}
            
            #+END_SRC
- must/filter match/term :: 布尔过滤查询

     #+BEGIN_SRC 
  
       {
         "query": { 
           "bool": { 
             "must": [
               { "match": { "title":   "Search"        }}, 
               { "match": { "content": "Elasticsearch" }}  
             ],
             "filter": [ 
             { "term":  { "status": "published" }}, 
               { "range": { "publish_date": { "gte": "2015-01-01" }}} 
             ]
           }
         }
       }
  
     #+END_SRC
- query/sort :: 查询排序
     #+BEGIN_SRC 
     {
            "query": {
                "bool": {
                    "must": [
                        {
                            "term": {
                                "ip.raw": "210.186.226.178"
                            }
                        }
                    ],
                    "must_not": [ ],
                    "should": [ ]
                }
            },
            "sort": {
              "started": "desc"
            },
        }
     #+END_SRC
- range :: 范围查询
            #+BEGIN_SRC 
 {
     'query': {
            'range': {
                      'insert_time':{
                                     'gte': start_time,
                                     'lte': end_time
                      }
           }
        }
 }           
            #+END_SRC
- _source :: 控制返回字段
             #+BEGIN_SRC  
{
    "_source": ["sha1"],
    "query": {
        "bool": {
            "should": [
                {"exists": {"field": "network.domain"}},
                {"exists": {"field": "network.http"}},
                {"exists": {"field": "network.url"}},
                {"exists": {"field": "network.ip"}},
                {"exists": {"field": "network.udp"}},
                {"exists": {"field": "network.tcp"}},
                {"exists": {"field": "network.dns"}}
            ],
            "minimum_should_match": 1
        }
    },
    "aggs": {
        "count": {
            "cardinality": {
                "field": "sha1"
            }
        }
    }
}
             #+END_SRC
** aggs

10.252.16.20:9200/alias_malware/_search?size=0

- terms :: 字段各类型count统计
           
           size = 0 表示返回全部
   
  #+BEGIN_EXAMPLE
{
 "query": {
    "match_all": {}
  },
  "aggs": {
        "type": {
          "terms": {
            "field": "malicious_type",
        	 "size": 200
          }
        }
   }
      
}
  #+END_EXAMPLE
  
- cardinality :: 先去重再求和 
                 #+BEGIN_SRC 
{
    "query" : {
      "term" : { "malicious" : "UNKNOWN" }
    },
      "aggs": {
        "count": {
          "cardinality": {
            "field": "sha1"
          }
        }
      }
}
                 #+END_SRC
                 #+BEGIN_SRC python
                 {
                     "_source": ["sha256"],
                     "query": {
                         "exists": {
                             "field": "sha256"
                         }
                     },
                     "aggs": {
                         "count": {
                             "cardinality": {
                                 "field": "sha1"
                             }
                         }
                     },
                     "size": 0
                 }
                 #+END_SRC
* questions
** from szie/scroll/search after

   http://www.jianshu.com/p/91d03b16af77

   在使用关系型数据库中，我们被告知要注意甚至被明确禁止使用深度分页，同理，在 Elasticsearch 中，也应该尽量避免使用深度分页

   深度分页的问题:CUP、内存、IO、网络带宽问题  10个shard*一亿条数据的doc_id

   - from size
     
     100+10、110+10.....10000+10 越往后请求的越多

   - scroll:

         query fetch merge

         查询结果缓存,每次fetch size*shard文档 merge输出
  
         scroll不适合做实时查询: 1.初始化结果缓存成快照 2.fetch数据，操作数据

         search_type。赋值为scan，表示采用 Scroll-Scan 的方式遍历，同时告诉 Elasticsearch 搜索结果不需要排序

         size 控制的是每个分片的返回的数据量而不是整个请求返回的数据量。

   - search after

     1.必须先要指定排序,记住坐标

     2.从任意一个位置 带上search_after=lastEmittedDocFieldValue 偏移量查数据

     如果我要做非常多页的查询时，最起码search after是一个常量查询延迟和开销，并无什么副作用。
     
     无论去到多少页，请求始终就是请求了size个docs,是个常量 

     业务折衷一：禁止跳页查询 只提供下一页
** es shard 生命周期
   http://lxwei.github.io/posts/Elasticsearch-Shard-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html

   - 动态索引 

    三个关键的索引结构：倒排列表、临时索引、已删除列表 

    * 临时索引

      临时索引是在内存中实时建立的倒排索引，结果与倒排列表一样，
      只是存在于内存中，当有新文档时，实时解析文档并加到这个临时索引中

    * 已删除列表

      已删除列表存储已被删除的文档的文档ID
      一个文档被修改，搜索引擎一般删除旧文档，新建新文档,间接实现更新,
      这么做的原因主要是索引文件存储在磁盘文件，写磁盘不方便

    * 倒排列表

      倒排索引是已经建好的索引结果，倒排列表存在磁盘文件中，单词词典在内存中

      搜索操作：同时到内存和磁盘中查找，合并，然后利用已删除列表过滤文档

   - es动态更新

     segment是lucence定义的索引段，一个索引内包含多个，segment对外提供搜索服务

     新文档-->内存的buffer内-->写到磁盘生成新的segment，对外服务 同时清空buffer

     要频繁的写入磁盘十分消耗资源,es先将文档写到filesystem cache内，此时就能被搜索到了(linux下文件句柄要调整)

     必须调用fsync将segment刷到磁盘上，才能保证数据不丢失。
        
   - refresh/flush

     refresh是轻量级的写和打开一个新segment的操作

     Elasticsearch中，执行commit操作并删除translog的操作叫flush

   - segment merge

     如果不停的产生新的segment，Elasticsearch中很快就会段爆炸，
     每个段都要消耗文件描述符、内存、CPU 周期，且每个search请求都需要遍历所有的segment，会造成搜索操作很慢。

     _optimize?max_num_segments=1 一个segment情况下查询要快些，但是得控制大小，

** es node

  -  data node 上

     http.enabled: false，同时也不要安装head, bigdesk, marvel等监控 插件
     http功能可以在非数据节点服务器上开启
     一台服务器上最好只部署一个Node

  -  避免脑裂现象
     1. discovery.zen.minimum_master_nodes N/2+1

        要选举一个Master需要多少了候选节点，默认为1
        3节点的集群 3/2+1 = 2(向下取整)
     2. discovery.zen.ping.timeout

        等待ping响应的超时时间，默认值是3秒。如果网络缓慢或拥塞，建议略微调大这个值
** es pipeline

   https://www.felayman.com/articles/2017/11/24/1511527532643.html#b3_solo_h4_22

** es 搜索原理

    https://blog.csdn.net/donghaixiaolongwang/article/category/6747676

    Elasticsearch之四种查询类型和搜索原理
