#+SETUPFILE: setup.org
#+TITLE: 读廖雪峰python文档记录
* TODO 文档下载链接
  - State "TODO"       from              [2019-01-07 Mon 11:19]
    
* 字符编码
  #+BEGIN_QUOTE
  
  *字符 > ASCII > Unicode > UTF-8*  演变历史

  我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。

  因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。

  由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。

  但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。

  你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。

因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。

Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。

现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。

字母A用ASCII编码是十进制的65，二进制的01000001；

字符0用ASCII编码是十进制的48，二进制的00110000，注意字符'0'和整数0是不同的；

汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。

你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。

新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。

所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：


搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：

在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。

用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件

#+ATTR_HTML: :width 60% :height 60% 
[[file:../images/screenshot/20190107112647.png]]

  
所以你看到很多网页的源码上会有类似<meta charset="UTF-8" />的信息，表示该网页正是用的UTF-8编码




  #+END_QUOTE
* python 字符串编码转换
  
  #+BEGIN_QUOTE
  Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码，普通的字符串'ABC'在Python内部都是ASCII编码的。Python提供了ord()和chr()函数，可以把字母和对应的数字相互转换

  Python在后来添加了对Unicode的支持，以Unicode表示的字符串用u'...'表示

  *把u'xxx'转换为UTF-8编码的'xxx'用encode('utf-8')方法*

  *把UTF-8编码表示的字符串'xxx'转换为Unicode字符串u'xxx'用decode('utf-8')方法*

  #+ATTR_HTML: :width 60% :height 60% 
  [[file:../images/screenshot/20190107120203.png]]

  英文字符转换后表示的UTF-8的值和Unicode值相等（但占用的存储空间不同），
  而中文字符转换后1个Unicode字符将变为3个UTF-8字符

  #+ATTR_HTML: :width 60% :height 60% 
  [[file:../images/screenshot/20190107120904.png]]
  

  =# -*- coding: utf-8 -*-= 注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码

  Python当然也支持其他编码方式，比如把Unicode编码成GB2312：

  >>> u'中文'.encode('gb2312')

  '\xd6\xd0\xce\xc4'

  但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用Unicode和UTF-8这两种编码方式。
  
  在Python 3.x版本中，把'xxx'和u'xxx'统一成Unicode编码，即写不写前缀u都是一样的，而以字节形式表示的字符串则必须加上b前缀：b'xxx'。
  #+END_QUOTE
  
* % 格式化字符串

  #+BEGIN_QUOTE
  常见的占位符有：
  %d	整数

  %f	浮点数

  %s	字符串

  %x	十六进制整数

  
  #+BEGIN_SRC 
  >>> '%5d-%03d' % (3, 1)
  '    3-001'


  >>> '%05.2f' % 3.1415926
  '03.14'


  >>> 'growth rate: %d %%' % 7
  'growth rate: 7 %'
  #+END_SRC

  如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串

  字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：


  #+END_QUOTE
  
* list / tuple /dict /set

  a = [0,'1',True]


  t = ('a',) 定义一个元素的元组

  t = ('a', 'b', ['A', 'B'])  *'可变的' tuple*


  dict:

  查找和插入的速度极快，不会随着key的增加而增加；

  需要占用大量的内存，内存浪费多。

  list：

  查找和插入的时间随着元素的增加而增加；

  占用空间小，浪费内存很少。


  set可以做数学意义上的交集、并集等操作,set内不能存放list和dict等对象


  字符串'xxx'或Unicode字符串u'xxx'也可以看成是一种list，每个元素就是一个字符

  >>> 'ABCDEFG'[::2]
  
  'ACEG'

* 函数
** 参数

  *可变参数* : 仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple

  #+BEGIN_SRC python
  def calc(*numbers):

      sum = 0

      for n in numbers:

          sum = sum + n * n

      return sum
   
  calc(1, 2)
  #+END_SRC
  *关键字参数* :在参数前面加两个*号,允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict

  函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数

  #+BEGIN_SRC python
  def person(name, age, **kw):

      print 'name:', name, 'age:', age, 'other:', kw
  #+END_SRC

  *参数组合* : 参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数

  #+BEGIN_SRC python
  def func(a, b, c=0, *args, **kw):

      print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw


  #+END_SRC

** 递归
   
  *递归函数:*

  理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰
  
  #+BEGIN_SRC python
  def fact(n):

      if n==1:

          return 1

      return n * fact(n - 1def fact(n):

  #+END_SRC

  *尾递归* 是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。
  这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况

  遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化

 #+BEGIN_SRC python
 def fact(n):

     return fact_iter(1, 1, n)


 def fact_iter(product, count, max):

     if count > max:

         return product

     return fact_iter(product * count, count + 1, max)

 #+END_SRC 

** 列表生成式
   
  
  list生成式 : =[x * x for x in range(1, 11) if x % 2 == 0]=

  for i, value in enumerate(['A', 'B', 'C']): =enumerate= 函数可以把一个list变成索引-元素对

  [k + '=' + v for k, v in d.iteritems()] =iteritems()= 可以同时迭代dict的key和value

  #+BEGIN_SRC  python

  if not isinstance(x, (int, float)):
      raise TypeError('bad operand type')
  
  #+END_SRC

** 生成器

   通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的

   如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？
   这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）

   要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator
   
   >>> g = (x * x for x in range(10))

   >>> g

   <generator object <genexpr> at 0x10b612320>

   通过g.next打印元素
   
   yield关键字定义斐波那契数列生成器
   #+BEGIN_SRC python
   def fib(max):

       n, a, b = 0, 0, 1

       while n < max:

           #print b
           yield b

           a, b = b, a + b

           n = n + 1

   #+END_SRC

   变成generator的函数，在每次调用next()的时候执行，
   遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行

** 函数式编程
   Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算

   函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！

   由于Python允许使用变量，因此，Python不是纯函数式编程语言

   - 论函数做为参数

   *高阶函数map/reduce*

   map()函数接收两个参数，一个是函数，一个是序列

   #+BEGIN_SRC python
   def f(x):
       return x * x

   map(f, [1,2,3])

   #+END_SRC

   reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做计算

   #+BEGIN_SRC python
   def f(x, y):
       return x * 10 + y

   reduce(f, [1,3,5])

   reduce(f, map(int, '13579')) #str 转换成 int

   #用lambda函数进一步简化成
   reduce(lambda x,y : x*10+y,map(int,'567'))
   #+END_SRC
   *自定义排序算法*
   sorted 排序的原则是对比较结果返回 -1,0,1
   
   忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较

   #+BEGIN_SRC python
   def cmp_ignore_case(s1, s2):

       u1 = s1.upper()

       u2 = s2.upper()

       if u1 < u2:

           return -1

       if u1 > u2:

           return 1

       return 0


   sorted(['Ba','ba','Cc','cC'])
   sorted(['Ba','ba','Cc','cC'],cmp_ignore_case)

   #+END_SRC

   - 论函数做为返回值

     相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。

     #+BEGIN_SRC python
     def lazy_sum(*args):

         def sum():

             ax = 0

             for n in args:

                 ax = ax + n

             return ax

         return sum

     f = lazy_sum(1,2,3)
     #当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数
     print f
     #调用函数f时，才真正计算求和的结果
     print f() # 
     #+END_SRC
** 匿名函数

   : map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])

   关键字lambda表示匿名函数，冒号前面的x表示函数参数

   匿名函数有个限制，就是只能有一个表达式

   Python对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数
** 装饰器
   无参数装饰器
   
   #+BEGIN_SRC python
   import functools

   def log(func):

       @functools.wraps(func)
       def wrapper(*args, **kw):

           print 'call %s():' % func.__name__

           return func(*args, **kw)

       return wrapper

   @log
   def now():
       print '2019-01-07'


   now()
   #+END_SRC

   log()是一个decorator，返回一个函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数
   
   需要传参数装饰器

   #+BEGIN_SRC python
   import functools

   def log(text):

       def _decorator(func):
           @functools.wraps(func)
           def wrapper(*args, **kw):

               print '%s %s():' % (text, func.__name__)

               return func(*args, **kw)

           return wrapper

       return _decorator

   @log('execute')
   def now():
       print '2019-01-07'


   now() #now = log('execute')(now)

   #+END_SRC

   以上两种decorator的定义都没有问题,它们的__name__已经从原来的'now'变成了'wrapper'

   Python内置的functools.wraps就是干这个事的，所以，一个完整的decorator的写法,需要添加
   =@functools.wraps(func)=

   面向对象（OOP）的设计模式中，decorator被称为装饰模式
** 偏函数

   #+BEGIN_SRC python
   def int2(x, base=2):
       return int(x, base)

   int2('1000') # 8

   #+END_SRC

   =functools.partial= 就是帮助我们创建一个偏函数的
   把一个函数的某些参数（不管有没有默认值）给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单

   当函数的参数个数太多，需要简化时,使用偏函数

   int2 = functools.partial(int, base=2)
* 模块

  *作用域*
  
  __xxx__这样的变量是特殊变量(__author__，__name__)

  _xxx和__xxx这样的函数或变量就是非公开的（private）

  *模块搜索路径* 

  Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中

  添加路径方式:


  1. 运行时添加
  : sys.path.append('/Users/michael/my_py_scripts')

  2.PYTHONPATH 

  Python提供了__future__模块，把下一个新版本的特性导入到当前版本

  如果要获得一个对象的所有属性和方法，可以使用dir()函数

  为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class能添加的属性


  *属性控制*

  Python内置的 =@property= 装饰器就是负责把一个xxx的getter方法变成属性调用,@xxx.setter
  负责把一个setter方法变成属性赋值
  
  #+BEGIN_SRC python
  class Student(object):

      @property

      def score(self):

          return self._score



      @score.setter

      def score(self, value):

          if not isinstance(value, int):

              raise ValueError('score must be an integer!')

          if value < 0 or value > 100:

              raise ValueError('score must between 0 ~ 100!')

          self._score = value



  s = Student()

  s.score = 60 # OK，实际转化为s.set_score(60)

  s.score # OK，实际转化为s.get_score()
  #+END_SRC
  

  由于Python允许使用 *多重继承* ,java 是单一继承的语言

  